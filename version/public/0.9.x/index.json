{
  "api/_u_uxt_pinch_slider_component.html": {
    "href": "api/_u_uxt_pinch_slider_component.html",
    "title": "Class UUxtPinchSliderComponent | UXT Documentation",
    "keywords": "Class UUxtPinchSliderComponent Component that implements a thumb slider UI and logic. Inheritance System::Object USceneComponent UUxtPinchSliderComponent Inherited Members IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::OnBeginGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnEndGrab(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtPinchSliderComponent : public xtGrabTarget, public xtFarTarget Constructors | Improve this Doc View Source UUxtPinchSliderComponent() Declaration public: UUxtPinchSliderComponent() Fields | Improve this Doc View Source OnBeginFocus Event raised when slider enters focus Declaration public: FUxtPinchSliderBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtPinchSliderBeginFocusDelegate | Improve this Doc View Source OnBeginInteraction Event raised when slider starts interaction. Declaration public: FUxtPinchSliderBeginInteractionDelegate OnBeginInteraction Field Value Type Description FUxtPinchSliderBeginInteractionDelegate | Improve this Doc View Source OnEndFocus Event raised when slider exits focus Declaration public: FUxtPinchSliderEndFocusDelegate OnEndFocus Field Value Type Description FUxtPinchSliderEndFocusDelegate | Improve this Doc View Source OnEndInteraction Event raised when slider ends interaction. Declaration public: FUxtPinchSliderEndInteractionDelegate OnEndInteraction Field Value Type Description FUxtPinchSliderEndInteractionDelegate | Improve this Doc View Source OnSliderDisabled Event raised when slider changes state Declaration public: FUxtPinchSliderDisabledDelegate OnSliderDisabled Field Value Type Description FUxtPinchSliderDisabledDelegate | Improve this Doc View Source OnSliderEnabled Event raised when slider changes state Declaration public: FUxtPinchSliderEnabledDelegate OnSliderEnabled Field Value Type Description FUxtPinchSliderEnabledDelegate | Improve this Doc View Source OnUpdateState Event raised when slider changes state Declaration public: FUxtPinchSliderUpdateStateDelegate OnUpdateState Field Value Type Description FUxtPinchSliderUpdateStateDelegate | Improve this Doc View Source OnUpdateValue Event raised when slider value changes. Declaration public: FUxtPinchSliderUpdateValueDelegate OnUpdateValue Field Value Type Description FUxtPinchSliderUpdateValueDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetCurrentState() Get the current state of the slider Declaration public: EUxtSliderState GetCurrentState() const Returns Type Description EUxtSliderState | Improve this Doc View Source GetNumTickMarks() Declaration public: int GetNumTickMarks() const Returns Type Description int | Improve this Doc View Source GetSliderEndDistance() Declaration public: float GetSliderEndDistance() const Returns Type Description float | Improve this Doc View Source GetSliderStartDistance() Declaration public: float GetSliderStartDistance() const Returns Type Description float | Improve this Doc View Source GetSliderValue() Declaration public: float GetSliderValue() const Returns Type Description float | Improve this Doc View Source GetSmoothing() Declaration public: float GetSmoothing() const Returns Type Description float | Improve this Doc View Source GetThumbVisuals() Get Static Mesh Component used for the thumb visuals Declaration public: UStaticMeshComponent * GetThumbVisuals() const Returns Type Description UStaticMeshComponent * | Improve this Doc View Source GetTickMarkScale() Declaration public: FVector GetTickMarkScale() const Returns Type Description FVector | Improve this Doc View Source GetTickMarkVisuals() Get Instanced Static Mesh Component used for the tick marks Declaration public: UInstancedStaticMeshComponent * GetTickMarkVisuals() const Returns Type Description UInstancedStaticMeshComponent * | Improve this Doc View Source GetTrackVisuals() Get Static Mesh Component used for the track visuals Declaration public: UStaticMeshComponent * GetTrackVisuals() const Returns Type Description UStaticMeshComponent * | Improve this Doc View Source IsEnabled() Get the enabled state of the slider Declaration public: bool IsEnabled() const Returns Type Description bool | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsFocused() Get the current focus state of the slider Declaration public: bool IsFocused() const Returns Type Description bool | Improve this Doc View Source IsGrabbed() Get the current grabbed state of the slider Declaration public: bool IsGrabbed() const Returns Type Description bool | Improve this Doc View Source IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetCollisionProfile(FName Profile) Set collision profile for the slider thumb Declaration public: void SetCollisionProfile(FName Profile) Parameters Type Name Description FName Profile | Improve this Doc View Source SetEnabled(bool bEnabled) Set the enabled state of the slider Declaration public: void SetEnabled(bool bEnabled) Parameters Type Name Description bool bEnabled | Improve this Doc View Source SetNumTickMarks(int NumTicks) Declaration public: void SetNumTickMarks(int NumTicks) Parameters Type Name Description int NumTicks | Improve this Doc View Source SetSliderEndDistance(float NewEnd) Declaration public: void SetSliderEndDistance(float NewEnd) Parameters Type Name Description float NewEnd | Improve this Doc View Source SetSliderStartDistance(float NewStart) Declaration public: void SetSliderStartDistance(float NewStart) Parameters Type Name Description float NewStart | Improve this Doc View Source SetSliderValue(float NewValue) Declaration public: void SetSliderValue(float NewValue) Parameters Type Name Description float NewValue | Improve this Doc View Source SetSmoothing(float NewSmoothing) Declaration public: void SetSmoothing(float NewSmoothing) Parameters Type Name Description float NewSmoothing | Improve this Doc View Source SetThumbVisuals(UStaticMeshComponent *Visuals) Set Static Mesh Component used for the thumb visuals Declaration public: void SetThumbVisuals(UStaticMeshComponent *Visuals) Parameters Type Name Description UStaticMeshComponent * Visuals | Improve this Doc View Source SetTickMarkScale(FVector NewScale) Declaration public: void SetTickMarkScale(FVector NewScale) Parameters Type Name Description FVector NewScale | Improve this Doc View Source SetTickMarkVisuals(UInstancedStaticMeshComponent *Visuals) Set Instanced Static Mesh Component used for the tick marks Declaration public: void SetTickMarkVisuals(UInstancedStaticMeshComponent *Visuals) Parameters Type Name Description UInstancedStaticMeshComponent * Visuals | Improve this Doc View Source SetTrackVisuals(UStaticMeshComponent *Visuals) Set Static Mesh Component used for the track visuals Declaration public: void SetTrackVisuals(UStaticMeshComponent *Visuals) Parameters Type Name Description UStaticMeshComponent * Visuals"
  },
  "api/_u_uxt_input_simulation_head_movement_component.html": {
    "href": "api/_u_uxt_input_simulation_head_movement_component.html",
    "title": "Class UUxtInputSimulationHeadMovementComponent | UXT Documentation",
    "keywords": "Class UUxtInputSimulationHeadMovementComponent Movement component that applies user input. Works similar to UFloatingPawnMovement, but does not require a APawn actor. Inheritance System::Object UMovementComponent UUxtInputSimulationHeadMovementComponent Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationHeadMovementComponent Methods | Improve this Doc View Source AddMovementInput(const FVector &Movement) Add cumulative movement input in world space. Declaration public: void AddMovementInput(const FVector &Movement) Parameters Type Name Description const FVector & Movement | Improve this Doc View Source AddRotationInput(const FRotator &Rotation) Add cumulative rotation input relative to current world space orientation. Declaration public: void AddRotationInput(const FRotator &Rotation) Parameters Type Name Description const FRotator & Rotation | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source IsHeadMovementEnabled() Declaration public: bool IsHeadMovementEnabled() const Returns Type Description bool | Improve this Doc View Source SetHeadMovementEnabled(bool bEnable) Declaration public: void SetHeadMovementEnabled(bool bEnable) Parameters Type Name Description bool bEnable | Improve this Doc View Source TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime enum ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_icon_brush_editor_utility_widget.html": {
    "href": "api/_u_uxt_icon_brush_editor_utility_widget.html",
    "title": "Class UUxtIconBrushEditorUtilityWidget | UXT Documentation",
    "keywords": "Class UUxtIconBrushEditorUtilityWidget Inheritance System::Object UEditorUtilityWidget UUxtIconBrushEditorUtilityWidget Namespace : Assembly : .dll Syntax public: class UUxtIconBrushEditorUtilityWidget Fields | Improve this Doc View Source TabID Gets unique identifier for the tab this EditorUtilityWidget was spawned into. Declaration protected: FName TabID Field Value Type Description FName Methods | Improve this Doc View Source GetIconBrushFont() Gets the font associated with the UUxtIconBrush. Declaration protected: UFont * GetIconBrushFont() const Returns Type Description UFont * | Improve this Doc View Source GetIconBrushString(FString &IconString) Gets the string associated with the UUxtIconBrush. Declaration protected: bool GetIconBrushString(FString &IconString) const Parameters Type Name Description FString & IconString Returns Type Description bool | Improve this Doc View Source HasValidPropertyHandle() Returns true if a non-null PropertyHandle is set. Declaration public: bool HasValidPropertyHandle() const Returns Type Description bool | Improve this Doc View Source OnPropertyHandleChanged() Event which triggers when the PropertyHandle is changed. Declaration protected: void OnPropertyHandleChanged() | Improve this Doc View Source SetIconBrushFont(const UFont *Font) Sets the font associated with the UUxtIconBrush. Declaration protected: bool SetIconBrushFont(const UFont *Font) Parameters Type Name Description const UFont * Font Returns Type Description bool | Improve this Doc View Source SetIconBrushString(const FString &IconString) Sets the string associated with the UUxtIconBrush. Declaration protected: bool SetIconBrushString(const FString &IconString) Parameters Type Name Description const FString & IconString Returns Type Description bool | Improve this Doc View Source SetPropertyHandle(TSharedRef<IPropertyHandle> InPropertyHandle) Sets the property handle which will be queried and altered for FUxtIconBrush properties. Declaration public: void SetPropertyHandle(TSharedRef<IPropertyHandle> InPropertyHandle) Parameters Type Name Description TSharedRef<IPropertyHandle> InPropertyHandle | Improve this Doc View Source SetTabID(FName ID) Sets the unique identifier for the tab this EditorUtilityWidget was spawned into. Declaration public: void SetTabID(FName ID) Parameters Type Name Description FName ID"
  },
  "api/_u_uxt_far_beam_component.html": {
    "href": "api/_u_uxt_far_beam_component.html",
    "title": "Class UUxtFarBeamComponent | UXT Documentation",
    "keywords": "Class UUxtFarBeamComponent When added to an actor with a far pointer, this component displays a beam from the pointer ray start to the current hit point. Inheritance System::Object USplineMeshComponent UUxtFarBeamComponent Namespace : Assembly : .dll Syntax public: class UUxtFarBeamComponent Constructors | Improve this Doc View Source UUxtFarBeamComponent() Declaration public: UUxtFarBeamComponent() Fields | Improve this Doc View Source HoverDistance Distance over the hit surface to place beam end at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source SetBeamMaterial(UMaterial *NewMaterial) Declaration public: void SetBeamMaterial(UMaterial *NewMaterial) Parameters Type Name Description UMaterial * NewMaterial | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_uxt_manipulation_move_logic.html": {
    "href": "api/_uxt_manipulation_move_logic.html",
    "title": "Class UxtManipulationMoveLogic | UXT Documentation",
    "keywords": "Class UxtManipulationMoveLogic Implements a move logic that will move an object based on the initial position of the grab point relative to the pointer and relative to the object, and subsequent changes to the pointer and the object's rotation Usage: When a manipulation starts, call Setup. Call Update for querying a new position for the object. Inheritance System::Object UxtManipulationMoveLogic Namespace : Assembly : .dll Syntax public: class UxtManipulationMoveLogic Methods | Improve this Doc View Source Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Setup move logic by caching initial input values Declaration public: void Setup(const FTransform &PointerCentroidPose, const FVector &GrabCentroid, const FTransform &ObjectTransform, const FVector &HeadPosition) Parameters Type Name Description const FTransform & PointerCentroidPose const FVector & GrabCentroid const FTransform & ObjectTransform const FVector & HeadPosition | Improve this Doc View Source Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) Provide updated input and head/camera position to retrieve new object position Declaration public: FVector Update(const FTransform &PointerCentroidPose, const FQuat &ObjectRotation, const FVector &ObjectScale, bool UsePointerRotation, const FVector &HeadPosition) const Parameters Type Name Description const FTransform & PointerCentroidPose const FQuat & ObjectRotation const FVector & ObjectScale bool UsePointerRotation const FVector & HeadPosition Returns Type Description FVector"
  },
  "api/_f_uxt_icon_brush_customization.html": {
    "href": "api/_f_uxt_icon_brush_customization.html",
    "title": "Class FUxtIconBrushCustomization | UXT Documentation",
    "keywords": "Class FUxtIconBrushCustomization Provides a custom property panel for the UxtIconBrush. Inheritance System::Object IPropertyTypeCustomization FUxtIconBrushCustomization Namespace : Assembly : .dll Syntax public: class FUxtIconBrushCustomization Methods | Improve this Doc View Source CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder &ChildBuilder, IPropertyTypeCustomizationUtils &CustomizationUtils) Declaration protected: virtual void CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder &ChildBuilder, IPropertyTypeCustomizationUtils &CustomizationUtils) override Parameters Type Name Description TSharedRef<IPropertyHandle> PropertyHandle IDetailChildrenBuilder & ChildBuilder IPropertyTypeCustomizationUtils & CustomizationUtils | Improve this Doc View Source CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow &HeaderRow, IPropertyTypeCustomizationUtils &CustomizationUtils) Declaration protected: virtual void CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow &HeaderRow, IPropertyTypeCustomizationUtils &CustomizationUtils) override Parameters Type Name Description TSharedRef<IPropertyHandle> PropertyHandle FDetailWidgetRow & HeaderRow IPropertyTypeCustomizationUtils & CustomizationUtils | Improve this Doc View Source MakeInstance() Declaration public: static TSharedRef<IPropertyTypeCustomization> MakeInstance() Returns Type Description TSharedRef<IPropertyTypeCustomization>"
  },
  "api/_f_uxt_grab_pointer_data.html": {
    "href": "api/_f_uxt_grab_pointer_data.html",
    "title": "Struct FUxtGrabPointerData | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerData Utility struct that stores transient data for a pointer which is interacting with a grabbable component. Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerData Fields | Improve this Doc View Source FarPointer The far pointer that is interacting with the component Declaration public: UUxtFarPointerComponent * FarPointer= nullptr Field Value Type Description UUxtFarPointerComponent * | Improve this Doc View Source FarRayHitPointInPointer Far pointer only property -> describes the relative transform of the grab point to the pointer transform (pointer origin / orientation) This is needed to calculate the new grab point on the object on pointer translations / rotations Declaration public: FTransform FarRayHitPointInPointer= FTransform::Identity Field Value Type Description FTransform | Improve this Doc View Source GrabPointTransform Last updated grab point transform. (Pointer transform in near pointer case, ray hit transform in far pointer case) Declaration public: FTransform GrabPointTransform Field Value Type Description FTransform | Improve this Doc View Source LocalGrabPoint Transform of the pointer when it started interacting, in the local space of the target component. This allows computing pointer offset in relation to the current actor transform. Declaration public: FTransform LocalGrabPoint Field Value Type Description FTransform | Improve this Doc View Source NearPointer The near pointer that is interacting with the component. Declaration public: UUxtNearPointerComponent * NearPointer= nullptr Field Value Type Description UUxtNearPointerComponent * | Improve this Doc View Source StartTime The time at which interaction started, in seconds since application start. Declaration public: float StartTime Field Value Type Description float"
  },
  "api/_u_uxt_finger_cursor_component.html": {
    "href": "api/_u_uxt_finger_cursor_component.html",
    "title": "Class UUxtFingerCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFingerCursorComponent When added to an actor with a near pointer, this component displays a ring cursor oriented towards the current poke target and scaled according to the distance. Inheritance System::Object UUxtRingCursorComponent UUxtFingerCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFingerCursorComponent Constructors | Improve this Doc View Source UUxtFingerCursorComponent() Declaration public: UUxtFingerCursorComponent() Fields | Improve this Doc View Source bShowOnGrabTargets Show the finger cursor on grab targets. Declaration public: bool bShowOnGrabTargets= false Field Value Type Description bool | Improve this Doc View Source MaxDistanceToTarget Maximum distance to the pointer target at which the cursor should be displayed. Declaration public: float MaxDistanceToTarget= 20.0f Field Value Type Description float | Improve this Doc View Source MaxRadius Cursor radius at the maximum distance to the target. Declaration public: float MaxRadius= 0.85f Field Value Type Description float | Improve this Doc View Source MinRadius Cursor radius when in contact with the target. Declaration public: float MinRadius= 0.15f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_far_pointer_component.html": {
    "href": "api/_u_uxt_far_pointer_component.html",
    "title": "Class UUxtFarPointerComponent | UXT Documentation",
    "keywords": "Class UUxtFarPointerComponent Component that casts a ray for the given hand-tracked hand and raises far interaction events on the far targets hit. A far target is an actor or component implementing the UUxtFarTarget interface. Inheritance System::Object UActorComponent UUxtPointerComponent UUxtFarPointerComponent Inherited Members UUxtPointerComponent::bFocusLocked UUxtPointerComponent::GetCursorTransform() UUxtPointerComponent::GetFocusLocked() UUxtPointerComponent::GetFocusTarget() UUxtPointerComponent::Hand UUxtPointerComponent::UUxtPointerComponent() Namespace : Assembly : .dll Syntax public: class UUxtFarPointerComponent : public xtPointerComponent Constructors | Improve this Doc View Source UUxtFarPointerComponent() Declaration public: UUxtFarPointerComponent() Fields | Improve this Doc View Source OnFarPointerDisabled Declaration public: FUxtFarPointerDisabledDelegate OnFarPointerDisabled Field Value Type Description FUxtFarPointerDisabledDelegate | Improve this Doc View Source OnFarPointerEnabled Declaration public: FUxtFarPointerEnabledDelegate OnFarPointerEnabled Field Value Type Description FUxtFarPointerEnabledDelegate | Improve this Doc View Source RayLength Pointer ray length from ray start. Declaration public: float RayLength= 500 Field Value Type Description float | Improve this Doc View Source RayStartOffset Start of the pointer ray expressed as an offset from the hand ray origin in the ray direction. Declaration public: float RayStartOffset= 5 Field Value Type Description float | Improve this Doc View Source TraceChannel Trace channel to be used in the pointer's line trace query. Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods | Improve this Doc View Source GetCursorTransform() Declaration public: virtual FTransform GetCursorTransform() const override Returns Type Description FTransform | Improve this Doc View Source GetFocusTarget() Declaration public: virtual UObject * GetFocusTarget() const override Returns Type Description UObject * | Improve this Doc View Source GetHitNormal() Current hit point normal or negative ray direction if there's no hit. Declaration public: FVector GetHitNormal() const Returns Type Description FVector | Improve this Doc View Source GetHitPoint() Current hit point location or ray end if there's no hit. Declaration public: FVector GetHitPoint() const Returns Type Description FVector | Improve this Doc View Source GetHitPrimitive() Primitive the pointer is currently hitting or null if none. Declaration public: UPrimitiveComponent * GetHitPrimitive() const Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetPointerOrientation() Orientation of the pointer ray. Declaration public: FQuat GetPointerOrientation() const Returns Type Description FQuat | Improve this Doc View Source GetPointerOrigin() Origin of the pointer ray as reported by the hand tracker. See GetRayStart() for actual start of the ray used for querying the scene. Declaration public: FVector GetPointerOrigin() const Returns Type Description FVector | Improve this Doc View Source GetRayStart() Start of the ray used for querying the scene. This is the pointer origin shifted by the ray start offset in the pointer forward direction. Declaration public: FVector GetRayStart() const Returns Type Description FVector | Improve this Doc View Source IsEnabled() Whether the pointer is currently enabled. Hit information is only valid while the pointer is enabled. Declaration public: bool IsEnabled() const Returns Type Description bool | Improve this Doc View Source IsPressed() Whether the pointer is currently pressed. Declaration public: bool IsPressed() const Returns Type Description bool | Improve this Doc View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset | Improve this Doc View Source SetFocusLocked(bool bLocked) Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Declaration public: virtual void SetFocusLocked(bool bLocked) override Parameters Type Name Description bool bLocked Overrides UUxtPointerComponent::SetFocusLocked(bool bLocked) | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_i_uxt_poke_target.html": {
    "href": "api/_i_uxt_poke_target.html",
    "title": "Class IUxtPokeTarget | UXT Documentation",
    "keywords": "Class IUxtPokeTarget Interface for components that can be poked. Inheritance System::Object IUxtPokeTarget Namespace : Assembly : .dll Syntax public: class IUxtPokeTarget Methods | Improve this Doc View Source GetPokeBehaviour() Returns which poke behaviour this target supports. Declaration public: EUxtPokeBehaviour GetPokeBehaviour() const Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source IsPokeFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsPokeFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume starts overlapping the actor. Declaration public: void OnBeginPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke(UUxtNearPointerComponent *Pointer) Raised when a pointer poke volume stops overlapping the actor. Declaration public: void OnEndPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitPokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke(UUxtNearPointerComponent *Pointer) Raised while a pointer poke volume is overlapping the actor. Declaration public: void OnUpdatePoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_f_u_x_tools_w_m_r_module.html": {
    "href": "api/_f_u_x_tools_w_m_r_module.html",
    "title": "Class FUXToolsWMRModule | UXT Documentation",
    "keywords": "Class FUXToolsWMRModule Module for WMR-specific functionality. Inheritance System::Object IModuleInterface FUXToolsWMRModule Namespace : Assembly : .dll Syntax public: class FUXToolsWMRModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_interaction_utils.html": {
    "href": "api/_f_uxt_interaction_utils.html",
    "title": "Class FUxtInteractionUtils | UXT Documentation",
    "keywords": "Class FUxtInteractionUtils Inheritance System::Object FUxtInteractionUtils Namespace : Assembly : .dll Syntax public: class FUxtInteractionUtils Methods | Improve this Doc View Source GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Calculates the point on the target surface that is closest to the point passed in. Return value indicates whether a point was found. Declaration public: static bool GetDefaultClosestPointOnPrimitive(const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutPointOnSurface, float &OutDistanceSqr) Parameters Type Name Description const UPrimitiveComponent * Primitive const FVector & Point FVector & OutPointOnSurface float & OutDistanceSqr Returns Type Description bool"
  },
  "api/_f_uxt_font_character.html": {
    "href": "api/_f_uxt_font_character.html",
    "title": "Struct FUxtFontCharacter | UXT Documentation",
    "keywords": "Struct FUxtFontCharacter Blueprint structure which contains data required to render a character within a offline font. Namespace : Assembly : .dll Syntax public: struct FUxtFontCharacter Fields | Improve this Doc View Source Size The normalized width and height of the character. Declaration public: FVector Size Field Value Type Description FVector | Improve this Doc View Source Text The single font character as a string. Declaration public: FString Text Field Value Type Description FString | Improve this Doc View Source Texture The texutre containing the font character. Declaration public: UTexture2D * Texture Field Value Type Description UTexture2D * | Improve this Doc View Source UVTransform The UV offset within the texture to find the character. Declaration public: FLinearColor UVTransform Field Value Type Description FLinearColor"
  },
  "api/_a_uxt_hand_interaction_actor.html": {
    "href": "api/_a_uxt_hand_interaction_actor.html",
    "title": "Class AUxtHandInteractionActor | UXT Documentation",
    "keywords": "Class AUxtHandInteractionActor Actor that drives hand interactions with components that implement the far, grab and poke target interfaces. A hand has two interaction modes: Near: interactions performed by poking or grabbing targets directly. Far: interactions performed by pointing at far targets from a distance via a hand ray. The actor transitions between modes depending on whether there is a grab or poke target within the near activation distance. Inheritance System::Object AActor AUxtHandInteractionActor Namespace : Assembly : .dll Syntax public: class AUxtHandInteractionActor Constructors | Improve this Doc View Source AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Declaration public: AUxtHandInteractionActor(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer Fields | Improve this Doc View Source bShowNearCursorOnGrabTargets Show the near cursor on grab targets. Changes to this value after BeginPlay have no effect. Declaration public: bool bShowNearCursorOnGrabTargets= false Field Value Type Description bool | Improve this Doc View Source bUseDefaultFarBeam Create default visuals for the far beam. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultFarBeam= true Field Value Type Description bool | Improve this Doc View Source bUseDefaultFarCursor Create default visuals for the far cursor. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultFarCursor= true Field Value Type Description bool | Improve this Doc View Source bUseDefaultNearCursor Create default visuals for the near cursor. Changes to this value after BeginPlay have no effect. Declaration public: bool bUseDefaultNearCursor= true Field Value Type Description bool | Improve this Doc View Source NearActivationDistance Distance from the hand to the closest grab or poke target at which near interaction activates. Declaration public: float NearActivationDistance= 20.0f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source GetHand() Declaration public: EControllerHand GetHand() const Returns Type Description EControllerHand | Improve this Doc View Source GetPokeRadius() Declaration public: float GetPokeRadius() const Returns Type Description float | Improve this Doc View Source GetRayLength() Declaration public: float GetRayLength() const Returns Type Description float | Improve this Doc View Source GetRayStartOffset() Declaration public: float GetRayStartOffset() const Returns Type Description float | Improve this Doc View Source GetTraceChannel() Declaration public: ECollisionChannel GetTraceChannel() const Returns Type Description ECollisionChannel | Improve this Doc View Source SetHand(EControllerHand NewHand) Declaration public: void SetHand(EControllerHand NewHand) Parameters Type Name Description EControllerHand NewHand | Improve this Doc View Source SetPokeRadius(float NewPokeRadius) Declaration public: void SetPokeRadius(float NewPokeRadius) Parameters Type Name Description float NewPokeRadius | Improve this Doc View Source SetRayLength(float NewRayLength) Declaration public: void SetRayLength(float NewRayLength) Parameters Type Name Description float NewRayLength | Improve this Doc View Source SetRayStartOffset(float NewRayStartOffset) Declaration public: void SetRayStartOffset(float NewRayStartOffset) Parameters Type Name Description float NewRayStartOffset | Improve this Doc View Source SetTraceChannel(ECollisionChannel NewTraceChannel) Declaration public: void SetTraceChannel(ECollisionChannel NewTraceChannel) Parameters Type Name Description ECollisionChannel NewTraceChannel | Improve this Doc View Source Tick(float DeltaTime) Declaration public: virtual void Tick(float DeltaTime) override Parameters Type Name Description float DeltaTime"
  },
  "api/_u_x_tools_w_m_r.html": {
    "href": "api/_u_x_tools_w_m_r.html",
    "title": "Class UXToolsWMR | UXT Documentation",
    "keywords": "Class UXToolsWMR Inheritance System::Object ModuleRules UXToolsWMR Namespace : Assembly : .dll Syntax public: class UXToolsWMR Constructors | Improve this Doc View Source UXToolsWMR(ReadOnlyTargetRules Target) Declaration public: UXToolsWMR(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_f_uxt_bounds_control_preset_utils.html": {
    "href": "api/_f_uxt_bounds_control_preset_utils.html",
    "title": "Struct FUxtBoundsControlPresetUtils | UXT Documentation",
    "keywords": "Struct FUxtBoundsControlPresetUtils Namespace : Assembly : .dll Syntax public: struct FUxtBoundsControlPresetUtils Methods | Improve this Doc View Source GetPresetAffordances(EUxtBoundsControlPreset Preset) Get the list of affordances contained in a preset. Declaration public: static const TArray<FUxtBoundsControlAffordanceInfo> & GetPresetAffordances(EUxtBoundsControlPreset Preset) Parameters Type Name Description EUxtBoundsControlPreset Preset Returns Type Description const TArray< FUxtBoundsControlAffordanceInfo > &"
  },
  "api/_u_uxt_hand_tracking_function_library.html": {
    "href": "api/_u_uxt_hand_tracking_function_library.html",
    "title": "Class UUxtHandTrackingFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtHandTrackingFunctionLibrary Library of hand tracking functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtHandTrackingFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtHandTrackingFunctionLibrary Methods | Improve this Doc View Source GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not currently tracked, in which case the values of the output parameters are unchanged. Declaration public: static bool GetHandJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool | Improve this Doc View Source GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: static bool GetHandPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool | Improve this Doc View Source GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbed state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool | Improve this Doc View Source GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not currently tracked, in which case the value of the output parameter is unchanged. Declaration public: static bool GetIsHandSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool | Improve this Doc View Source IsHandTracked(EControllerHand Hand) Returns whether the given hand is tracked. Declaration public: static bool IsHandTracked(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand Returns Type Description bool"
  },
  "api/_u_uxt_far_target.html": {
    "href": "api/_u_uxt_far_target.html",
    "title": "Class UUxtFarTarget | UXT Documentation",
    "keywords": "Class UUxtFarTarget Inheritance System::Object UInterface UUxtFarTarget Namespace : Assembly : .dll Syntax public: class UUxtFarTarget"
  },
  "api/_a_uxt_input_simulation_actor.html": {
    "href": "api/_a_uxt_input_simulation_actor.html",
    "title": "Class AUxtInputSimulationActor | UXT Documentation",
    "keywords": "Class AUxtInputSimulationActor Actor that produces head pose and hand animations for the input simulation subsystem. Inheritance System::Object AActor AUxtInputSimulationActor Namespace : Assembly : .dll Syntax public: class AUxtInputSimulationActor Fields | Improve this Doc View Source bAddDefaultInputBindings If true, adds default input bindings for input simulation. Declaration public: uint32 bAddDefaultInputBindings Field Value Type Description uint32 Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source GetHeadMovement() Declaration public: UUxtInputSimulationHeadMovementComponent * GetHeadMovement() const Returns Type Description UUxtInputSimulationHeadMovementComponent * | Improve this Doc View Source GetLeftHand() Declaration public: USkeletalMeshComponent * GetLeftHand() const Returns Type Description USkeletalMeshComponent * | Improve this Doc View Source GetRightHand() Declaration public: USkeletalMeshComponent * GetRightHand() const Returns Type Description USkeletalMeshComponent * | Improve this Doc View Source GetTargetPose(EControllerHand Hand) Get the current animation pose of a hand. If the hand is currently controlled by user input it will use the current target pose, otherwise the default pose is used. Declaration public: FName GetTargetPose(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description FName | Improve this Doc View Source IsHandControlled(EControllerHand Hand) True if the hand is currently controlled by the user. Declaration public: bool IsHandControlled(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool | Improve this Doc View Source IsHandVisible(EControllerHand Hand) True if the hand is currently visible. Declaration public: bool IsHandVisible(EControllerHand Hand) const Parameters Type Name Description EControllerHand Hand Returns Type Description bool | Improve this Doc View Source ResetTargetPose(EControllerHand Hand) Reset the default target animation pose for a hand. Declaration public: void ResetTargetPose(EControllerHand Hand) Parameters Type Name Description EControllerHand Hand | Improve this Doc View Source SetTargetPose(EControllerHand Hand, FName PoseName) Set the target animation pose for a hand. Declaration public: void SetTargetPose(EControllerHand Hand, FName PoseName) Parameters Type Name Description EControllerHand Hand FName PoseName | Improve this Doc View Source Tick(float DeltaSeconds) Declaration public: virtual void Tick(float DeltaSeconds) override Parameters Type Name Description float DeltaSeconds"
  },
  "api/_u_uxt_hand_constraint_component.html": {
    "href": "api/_u_uxt_hand_constraint_component.html",
    "title": "Class UUxtHandConstraintComponent | UXT Documentation",
    "keywords": "Class UUxtHandConstraintComponent Component that calculates a goal based on hand tracking and moves the owning actor. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the zone at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. Inheritance System::Object UActorComponent UUxtHandConstraintComponent Namespace : Assembly : .dll Syntax public: class UUxtHandConstraintComponent Constructors | Improve this Doc View Source UUxtHandConstraintComponent() Declaration public: UUxtHandConstraintComponent() Fields | Improve this Doc View Source bMoveOwningActor Actor transform is moved towards the goal if true. Disable this to only compute the goal without changing the actor transform. Declaration public: bool bMoveOwningActor= true Field Value Type Description bool | Improve this Doc View Source GoalMargin Margin between the hand bounding box and the goal location. Declaration public: float GoalMargin= 0.0f Field Value Type Description float | Improve this Doc View Source Hand Hand to use for the constraint. If set to 'Any Hand' the first tracked hand will be used, until tracking is lost. Declaration public: EControllerHand Hand= EControllerHand::AnyHand Field Value Type Description EControllerHand | Improve this Doc View Source LocationLerpTime Interpolation time for smoothed translation. Set to zero to disable smoothing. Declaration public: float LocationLerpTime= 0.05f Field Value Type Description float | Improve this Doc View Source OffsetMode Determines how the offset vector is computed. Declaration public: EUxtHandConstraintOffsetMode OffsetMode= EUxtHandConstraintOffsetMode::LookAtCamera Field Value Type Description EUxtHandConstraintOffsetMode | Improve this Doc View Source OnBeginTracking Event raised when the constraint begins tracking a hand. Declaration public: FUxtHandConstraintBeginTrackingDelegate OnBeginTracking Field Value Type Description FUxtHandConstraintBeginTrackingDelegate | Improve this Doc View Source OnConstraintActivated Event raised when the constraint becomes active, as indicated by the bIsConstraintActive property. Declaration public: FUxtHandConstraintActivatedDelegate OnConstraintActivated Field Value Type Description FUxtHandConstraintActivatedDelegate | Improve this Doc View Source OnConstraintDeactivated Event raised when the constraint becomes inactive, as indicated by the bIsConstraintActive property. Declaration public: FUxtHandConstraintDeactivatedDelegate OnConstraintDeactivated Field Value Type Description FUxtHandConstraintDeactivatedDelegate | Improve this Doc View Source OnEndTracking Event raised when the constraint ends tracking a hand. Declaration public: FUxtHandConstraintEndTrackingDelegate OnEndTracking Field Value Type Description FUxtHandConstraintEndTrackingDelegate | Improve this Doc View Source RotationLerpTime Interpolation time for smoothed rotation. Set to zero to disable smoothing. Declaration public: float RotationLerpTime= 0.05f Field Value Type Description float | Improve this Doc View Source RotationMode Determines how the goal rotation is computed. Declaration public: EUxtHandConstraintRotationMode RotationMode= EUxtHandConstraintRotationMode::LookAtCamera Field Value Type Description EUxtHandConstraintRotationMode | Improve this Doc View Source Zone Safe zone that determines the target location of the constraint relative to the hand. Declaration public: EUxtHandConstraintZone Zone= EUxtHandConstraintZone::UlnarSide Field Value Type Description EUxtHandConstraintZone Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetGoalLocation() Declaration public: const FVector & GetGoalLocation() const Returns Type Description const FVector & | Improve this Doc View Source GetGoalRotation() Declaration public: const FQuat & GetGoalRotation() const Returns Type Description const FQuat & | Improve this Doc View Source GetHandBounds() Declaration public: const FBox & GetHandBounds() const Returns Type Description const FBox & | Improve this Doc View Source GetTrackedHand() Declaration public: EControllerHand GetTrackedHand() const Returns Type Description EControllerHand | Improve this Doc View Source IsConstraintActive() Declaration public: bool IsConstraintActive() const Returns Type Description bool | Improve this Doc View Source IsHandUsableForConstraint(EControllerHand NewHand) Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Declaration public: virtual bool IsHandUsableForConstraint(EControllerHand NewHand) const Parameters Type Name Description EControllerHand NewHand Returns Type Description bool | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_u_uxt_grab_target_component.html": {
    "href": "api/_u_uxt_grab_target_component.html",
    "title": "Class UUxtGrabTargetComponent | UXT Documentation",
    "keywords": "Class UUxtGrabTargetComponent Interactable component that listens to grab events from near pointers. A pointer that starts grabing while near the actor is considered a grabbing pointer. The grab is released when the pointer stops grabing, regardless of whether it is still near or not. The GrabComponent does not react to grabbing pointers by itself, but serves as a base class for manipulation. Inheritance System::Object USceneComponent UUxtGrabTargetComponent Inherited Members IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) IUxtGrabTarget::OnBeginGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnEndGrab(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrab(UUxtNearPointerComponent *Pointer) IUxtGrabTarget::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtGrabTargetComponent : public xtGrabTarget, public xtFarTarget Constructors | Improve this Doc View Source UUxtGrabTargetComponent() Declaration public: UUxtGrabTargetComponent() Fields | Improve this Doc View Source InteractionMode Property that indicates if the object is grabbable with far or near interaction or both. Declaration public: int32 InteractionMode Field Value Type Description int32 | Improve this Doc View Source OnBeginGrab Event raised when grab starts. Declaration public: FUxtBeginGrabDelegate OnBeginGrab Field Value Type Description FUxtBeginGrabDelegate | Improve this Doc View Source OnEndGrab Event raised when grab ends. Declaration public: FUxtEndGrabDelegate OnEndGrab Field Value Type Description FUxtEndGrabDelegate | Improve this Doc View Source OnEnterGrabFocus Event raised when entering grab focus. Declaration public: FUxtEnterGrabFocusDelegate OnEnterGrabFocus Field Value Type Description FUxtEnterGrabFocusDelegate | Improve this Doc View Source OnExitGrabFocus Event raised when exiting grab. Declaration public: FUxtExitGrabFocusDelegate OnExitGrabFocus Field Value Type Description FUxtExitGrabFocusDelegate | Improve this Doc View Source OnUpdateGrab Event raised when grab updates. Declaration public: FUxtUpdateGrabDelegate OnUpdateGrab Field Value Type Description FUxtUpdateGrabDelegate | Improve this Doc View Source OnUpdateGrabFocus Event raised when grab focus updates. Declaration public: FUxtUpdateGrabFocusDelegate OnUpdateGrabFocus Field Value Type Description FUxtUpdateGrabFocusDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) Returns true if the pointer is currently grabbing the actor. PointerData will contain the associated grab data for the pointer. Index is the order in which pointers started grabbing. Declaration public: void FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) const Parameters Type Name Description UUxtNearPointerComponent * NearPointer UUxtFarPointerComponent * FarPointer bool & Success FUxtGrabPointerData & PointerData int & Index | Improve this Doc View Source ForceEndGrab() Release all currently grabbing pointers. Returns true if any pointers were grabbing and have been released, false if no pointers were grabbing. Declaration public: bool ForceEndGrab() Returns Type Description bool | Improve this Doc View Source GetGrabPointCentroid(const FTransform &Transform) Compute the centroid of the grab points in world space. Declaration public: FVector GetGrabPointCentroid(const FTransform &Transform) const Parameters Type Name Description const FTransform & Transform Returns Type Description FVector | Improve this Doc View Source GetGrabPointCentroidTransform() Compute the average transform of currently grabbing pointers Declaration protected: FTransform GetGrabPointCentroidTransform() const Returns Type Description FTransform | Improve this Doc View Source GetGrabPointers() Returns a list of all currently grabbing pointers. Declaration public: const TArray<FUxtGrabPointerData> & GetGrabPointers() const Returns Type Description const TArray< FUxtGrabPointerData > & | Improve this Doc View Source GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the first active grab pointer. If no pointer is grabbing the Valid output will be false. Declaration public: void GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData | Improve this Doc View Source GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) Returns the second active grab pointer. If less than two pointers are grabbing the Valid output will be false. Declaration public: void GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) const Parameters Type Name Description bool & Valid FUxtGrabPointerData & PointerData | Improve this Doc View Source GetTargetCentroid() Compute the centroid of the pointer targets in world space. Declaration public: FVector GetTargetCentroid() const Returns Type Description FVector | Improve this Doc View Source GetTickOnlyWhileGrabbed() Declaration public: bool GetTickOnlyWhileGrabbed() const Returns Type Description bool | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetTickOnlyWhileGrabbed(bool bEnable) Declaration public: void SetTickOnlyWhileGrabbed(bool bEnable) Parameters Type Name Description bool bEnable"
  },
  "api/_u_uxt_bounds_control_component.html": {
    "href": "api/_u_uxt_bounds_control_component.html",
    "title": "Class UUxtBoundsControlComponent | UXT Documentation",
    "keywords": "Class UUxtBoundsControlComponent Manages a set of affordances that can be manipulated for changing the actor transform. Inheritance System::Object UActorComponent UUxtBoundsControlComponent Namespace : Assembly : .dll Syntax public: class UUxtBoundsControlComponent Constructors | Improve this Doc View Source UUxtBoundsControlComponent() Declaration public: UUxtBoundsControlComponent() Fields | Improve this Doc View Source OnManipulationEnded Event raised when a manipulation is ended. Declaration public: FUxtBoundsControlManipulationEndedDelegate OnManipulationEnded Field Value Type Description FUxtBoundsControlManipulationEndedDelegate | Improve this Doc View Source OnManipulationStarted Event raised when a manipulation is started. Declaration public: FUxtBoundsControlManipulationStartedDelegate OnManipulationStarted Field Value Type Description FUxtBoundsControlManipulationStartedDelegate Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source ComputeBoundsFromComponents() Compute the bounding box based on the components of the bounding box actor. Declaration public: void ComputeBoundsFromComponents() | Improve this Doc View Source ComputeModifiedBounds(const FUxtBoundsControlAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer, FBox &OutBounds, FQuat &OutDeltaRotation) Compute new bounding box and rotation based on the currently active grab pointers. Declaration protected: void ComputeModifiedBounds(const FUxtBoundsControlAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer, FBox &OutBounds, FQuat &OutDeltaRotation) const Parameters Type Name Description const FUxtBoundsControlAffordanceInfo & Affordance const FUxtGrabPointerData & GrabPointer FBox & OutBounds FQuat & OutDeltaRotation | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source FindGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance) Look up the grab pointer data for an affordance. Returns null if the affordance is not currently grabbed. Declaration protected: FUxtGrabPointerData * FindGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance) Parameters Type Name Description const FUxtBoundsControlAffordanceInfo & Affordance Returns Type Description FUxtGrabPointerData * | Improve this Doc View Source GetActorAffordanceMap() Get the map between the affordance actors and their information. Declaration public: const TMap<AActor *, const FUxtBoundsControlAffordanceInfo *> & GetActorAffordanceMap() Returns Type Description const TMap<AActor *, const FUxtBoundsControlAffordanceInfo *> & | Improve this Doc View Source GetAffordanceKindActorClass(EUxtBoundsControlAffordanceKind Kind) Actor class that will be instantiated for the given kind of affordance. Declaration public: TSubclassOf<class AActor> GetAffordanceKindActorClass(EUxtBoundsControlAffordanceKind Kind) const Parameters Type Name Description EUxtBoundsControlAffordanceKind Kind Returns Type Description TSubclassOf<class AActor> | Improve this Doc View Source GetBounds() Declaration public: const FBox & GetBounds() const Returns Type Description const FBox & | Improve this Doc View Source GetCenterAffordanceClass() Declaration public: TSubclassOf<class AActor> GetCenterAffordanceClass() const Returns Type Description TSubclassOf<class AActor> | Improve this Doc View Source GetCornerAffordanceClass() Declaration public: TSubclassOf<class AActor> GetCornerAffordanceClass() const Returns Type Description TSubclassOf<class AActor> | Improve this Doc View Source GetCustomAffordances() Declaration public: const TArray<FUxtBoundsControlAffordanceInfo> & GetCustomAffordances() const Returns Type Description const TArray< FUxtBoundsControlAffordanceInfo > & | Improve this Doc View Source GetEdgeAffordanceClass() Declaration public: TSubclassOf<class AActor> GetEdgeAffordanceClass() const Returns Type Description TSubclassOf<class AActor> | Improve this Doc View Source GetFaceAffordanceClass() Declaration public: TSubclassOf<class AActor> GetFaceAffordanceClass() const Returns Type Description TSubclassOf<class AActor> | Improve this Doc View Source GetInitBoundsFromActor() Declaration public: bool GetInitBoundsFromActor() const Returns Type Description bool | Improve this Doc View Source GetPreset() Declaration public: EUxtBoundsControlPreset GetPreset() const Returns Type Description EUxtBoundsControlPreset | Improve this Doc View Source GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Compute the relative translation and scale between two boxes. Returns false if relative scale can not be computed. Declaration protected: static bool GetRelativeBoxTransform(const FBox &Box, const FBox &RelativeTo, FTransform &OutTransform) Parameters Type Name Description const FBox & Box const FBox & RelativeTo FTransform & OutTransform Returns Type Description bool | Improve this Doc View Source GetUsedAffordances() Get the list of affordances that will be used for the bounding box. This can be a based on a preset or a custom set of affordances. Declaration public: const TArray<FUxtBoundsControlAffordanceInfo> & GetUsedAffordances() const Returns Type Description const TArray< FUxtBoundsControlAffordanceInfo > & | Improve this Doc View Source OnPointerBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnPointerBeginGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source OnPointerEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being released. Declaration protected: void OnPointerEndGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source OnPointerUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Callback when an affordance is being grabbed. Declaration protected: void OnPointerUpdateGrab(UUxtGrabTargetComponent *Grabbable, FUxtGrabPointerData GrabPointer) Parameters Type Name Description UUxtGrabTargetComponent * Grabbable FUxtGrabPointerData GrabPointer | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source TryActivateGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer) Try to activate the given grab pointer on the bounding box. Returns true when the grab activation was successful and the pointer will update the bounding box. Declaration protected: bool TryActivateGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance, const FUxtGrabPointerData &GrabPointer) Parameters Type Name Description const FUxtBoundsControlAffordanceInfo & Affordance const FUxtGrabPointerData & GrabPointer Returns Type Description bool | Improve this Doc View Source TryReleaseGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance) Release the grab pointer. Returns true if the pointer was grabbing and has been released. Declaration protected: bool TryReleaseGrabPointer(const FUxtBoundsControlAffordanceInfo &Affordance) Parameters Type Name Description const FUxtBoundsControlAffordanceInfo & Affordance Returns Type Description bool | Improve this Doc View Source UpdateAffordanceTransforms() Update the world transforms of affordance actors to match the current bounding box. Declaration protected: void UpdateAffordanceTransforms() | Improve this Doc View Source UseCustomAffordances() Declaration public: bool UseCustomAffordances() const Returns Type Description bool"
  },
  "api/_uxt_two_hand_manipulation_scale_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_scale_logic.html",
    "title": "Class UxtTwoHandManipulationScaleLogic | UXT Documentation",
    "keywords": "Class UxtTwoHandManipulationScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands: object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new scale for the object. Inheritance System::Object UxtTwoHandManipulationScaleLogic Inherited Members UxtTwoHandManipulationScaleLogic Namespace : Assembly : .dll Syntax public: class UxtTwoHandManipulationScaleLogic Methods | Improve this Doc View Source Setup(GrabPointers PointerData, const FVector &ObjectScale) Sets up scale logic by storing initial object scale and hand distance Declaration public: void Setup(GrabPointers PointerData, const FVector &ObjectScale) Parameters Type Name Description GrabPointers PointerData const FVector & ObjectScale | Improve this Doc View Source Update(GrabPointers PointerData) Updates the scale based on the current grab pointer locations. Returns the new object scale. Declaration public: FVector Update(GrabPointers PointerData) const Parameters Type Name Description GrabPointers PointerData Returns Type Description FVector"
  },
  "api/_u_uxt_grab_pointer_data_function_library.html": {
    "href": "api/_u_uxt_grab_pointer_data_function_library.html",
    "title": "Class UUxtGrabPointerDataFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtGrabPointerDataFunctionLibrary Utility functions for FGrabPointerData. Inheritance System::Object UBlueprintFunctionLibrary UUxtGrabPointerDataFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtGrabPointerDataFunctionLibrary Methods | Improve this Doc View Source GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab point in world space. Declaration public: static FVector GetGrabLocation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetGrabPointTransform(const FUxtGrabPointerData &GrabData) Compute the grab point transform in world space. Declaration public: static FTransform GetGrabPointTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab rotation in world space. Declaration public: static FRotator GetGrabRotation(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator | Improve this Doc View Source GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the grab transform in world space. Declaration public: static FTransform GetGrabTransform(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space offset between pointer grab point and target. Declaration public: static FVector GetLocationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetPointerLocation(const FUxtGrabPointerData &GrabData) Returns the world space pointer location Declaration public: static FVector GetPointerLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetPointerTransform(const FUxtGrabPointerData &GrabData) Returns the world space pointer transform (at pointer origin). Declaration public: static FTransform GetPointerTransform(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FTransform | Improve this Doc View Source GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Compute the world space rotation between pointer grab point and target. Declaration public: static FRotator GetRotationOffset(const FTransform &Transform, const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FTransform & Transform const FUxtGrabPointerData & GrabData Returns Type Description FRotator | Improve this Doc View Source GetTargetLocation(const FUxtGrabPointerData &GrabData) Compute the pointer target in world space. Declaration public: static FVector GetTargetLocation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FVector | Improve this Doc View Source GetTargetRotation(const FUxtGrabPointerData &GrabData) Compute the target rotation in world space. Declaration public: static FRotator GetTargetRotation(const FUxtGrabPointerData &GrabData) Parameters Type Name Description const FUxtGrabPointerData & GrabData Returns Type Description FRotator"
  },
  "api/_u_uxt_far_cursor_component.html": {
    "href": "api/_u_uxt_far_cursor_component.html",
    "title": "Class UUxtFarCursorComponent | UXT Documentation",
    "keywords": "Class UUxtFarCursorComponent When added to an actor with a far pointer this component displays a flat ring cursor at the pointer's hit point oriented following the hit normal. Inheritance System::Object UUxtRingCursorComponent UUxtFarCursorComponent Namespace : Assembly : .dll Syntax public: class UUxtFarCursorComponent Constructors | Improve this Doc View Source UUxtFarCursorComponent() Declaration public: UUxtFarCursorComponent() Fields | Improve this Doc View Source HoverDistance Distance over the hit surface to place the cursor at. Declaration public: float HoverDistance= 0.5f Field Value Type Description float | Improve this Doc View Source IdleRadius Cursor radius when idle at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float IdleRadius= 0.6f Field Value Type Description float | Improve this Doc View Source PressedRadius Cursor radius when pressed at 1m from the camera. The actual radius will scale with the distance to the camera to keep a constant screen size. Declaration public: float PressedRadius= 0.32f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_i_uxt_far_target.html": {
    "href": "api/_i_uxt_far_target.html",
    "title": "Class IUxtFarTarget | UXT Documentation",
    "keywords": "Class IUxtFarTarget Interface to be implemented by components to handle far interactions. Inheritance System::Object IUxtFarTarget Namespace : Assembly : .dll Syntax public: class IUxtFarTarget Methods | Improve this Doc View Source IsFarFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsFarFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer starts focusing a primitive. Declaration public: void OnEnterFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus(UUxtFarPointerComponent *Pointer) Raised when a far pointer stops focusing a primitive. Declaration public: void OnExitFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarDragged(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is dragged. Declaration public: void OnFarDragged(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarPressed(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is pressed. Declaration public: void OnFarPressed(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is released. Declaration public: void OnFarReleased(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Raised when a focusing far pointer is updated. Declaration public: void OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) Parameters Type Name Description UUxtFarPointerComponent * Pointer"
  },
  "api/_f_u_x_tools_editor_module.html": {
    "href": "api/_f_u_x_tools_editor_module.html",
    "title": "Class FUXToolsEditorModule | UXT Documentation",
    "keywords": "Class FUXToolsEditorModule Inheritance System::Object IModuleInterface FUXToolsEditorModule Namespace : Assembly : .dll Syntax public: class FUXToolsEditorModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_bounds_control_affordance_info.html": {
    "href": "api/_f_uxt_bounds_control_affordance_info.html",
    "title": "Struct FUxtBoundsControlAffordanceInfo | UXT Documentation",
    "keywords": "Struct FUxtBoundsControlAffordanceInfo Affordances are grabbable actors placed on the bounding box which enable interaction. Namespace : Assembly : .dll Syntax public: struct FUxtBoundsControlAffordanceInfo Fields | Improve this Doc View Source Action Action to perform when the affordance is grabbed. Declaration public: EUxtBoundsControlAffordanceAction Action= EUxtBoundsControlAffordanceAction::Resize Field Value Type Description EUxtBoundsControlAffordanceAction | Improve this Doc View Source ActorClass Actor that will be spawned to represent the affordance. Declaration public: TSubclassOf<class AActor> ActorClass Field Value Type Description TSubclassOf<class AActor> | Improve this Doc View Source BoundsLocation Location of the affordance in normalized bounding box space (-1..1). Declaration public: FVector BoundsLocation Field Value Type Description FVector | Improve this Doc View Source BoundsRotation Rotation of the affordance in bounding box space. Declaration public: FRotator BoundsRotation Field Value Type Description FRotator | Improve this Doc View Source ConstraintMatrix Constraint matrix defining possible movement directions or rotation axes. Drag vectors during interaction are multiplied with this matrix. Declaration public: FMatrix ConstraintMatrix Field Value Type Description FMatrix | Improve this Doc View Source Kind Kind of actor class to use if no explicit actor class is set. In this case the matching actor class from the bounding box component will be used. Declaration public: EUxtBoundsControlAffordanceKind Kind= EUxtBoundsControlAffordanceKind::Center Field Value Type Description EUxtBoundsControlAffordanceKind Methods | Improve this Doc View Source GetWorldTransform(const FBox &Bounds, const FTransform &RootTransform) Transform from affordance local space to world space, based on the root transform. Root transform scale is not included in the transform. Declaration public: FTransform GetWorldTransform(const FBox &Bounds, const FTransform &RootTransform) const Parameters Type Name Description const FBox & Bounds const FTransform & RootTransform Returns Type Description FTransform"
  },
  "api/_u_uxt_move_axis_constraint.html": {
    "href": "api/_u_uxt_move_axis_constraint.html",
    "title": "Class UUxtMoveAxisConstraint | UXT Documentation",
    "keywords": "Class UUxtMoveAxisConstraint Component for limiting the translation axes for Manipulator Usage: Attach to actor that the constraint should be applied to. Inheritance System::Object USceneComponent UUxtTransformConstraint UUxtMoveAxisConstraint Inherited Members UUxtTransformConstraint::HandType UUxtTransformConstraint::Initialize(const FTransform &WorldPose) UUxtTransformConstraint::InteractionMode UUxtTransformConstraint::TargetComponent UUxtTransformConstraint::WorldPoseOnManipulationStart Namespace : Assembly : .dll Syntax public: class UUxtMoveAxisConstraint : public xtTransformConstraint Fields | Improve this Doc View Source bUseLocalSpaceForConstraint Use local or global space for constraint calculations Declaration public: bool bUseLocalSpaceForConstraint= false Field Value Type Description bool | Improve this Doc View Source ConstraintOnMovement Defines the axis the movement constraint should be applied to. Declaration public: int32 ConstraintOnMovement= 0 Field Value Type Description int32 Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const Parameters Type Name Description FTransform & Transform Overrides UUxtTransformConstraint::ApplyConstraint(FTransform &Transform) | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const Returns Type Description EUxtTransformMode Overrides UUxtTransformConstraint::GetConstraintType()"
  },
  "api/_u_uxt_input_simulation_local_player_subsystem.html": {
    "href": "api/_u_uxt_input_simulation_local_player_subsystem.html",
    "title": "Class UUxtInputSimulationLocalPlayerSubsystem | UXT Documentation",
    "keywords": "Class UUxtInputSimulationLocalPlayerSubsystem Subsystem that creates an actor for simulation when a game is started. Inheritance System::Object ULocalPlayerSubsystem UUxtInputSimulationLocalPlayerSubsystem Namespace : Assembly : .dll Syntax public: class UUxtInputSimulationLocalPlayerSubsystem Methods | Improve this Doc View Source Deinitialize() Declaration public: virtual void Deinitialize() override | Improve this Doc View Source Initialize(FSubsystemCollectionBase &Collection) Declaration public: virtual void Initialize(FSubsystemCollectionBase &Collection) override Parameters Type Name Description FSubsystemCollectionBase & Collection | Improve this Doc View Source ShouldCreateSubsystem(UObject *Outer) Declaration public: virtual bool ShouldCreateSubsystem(UObject *Outer) const override Parameters Type Name Description UObject * Outer Returns Type Description bool"
  },
  "api/_u_uxt_function_library.html": {
    "href": "api/_u_uxt_function_library.html",
    "title": "Class UUxtFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtFunctionLibrary Methods | Improve this Doc View Source GetHeadPose(UObject *WorldContextObject) Returns the world space position and orientation of the head. Declaration public: static FTransform GetHeadPose(UObject *WorldContextObject) Parameters Type Name Description UObject * WorldContextObject Returns Type Description FTransform | Improve this Doc View Source GetSceneComponentFromReference(const FComponentReference &ComponentRef, const AActor *Owner) Returns the scene component the passed component reference is pointing to if there is any - else will return nullptr. Declaration public: static USceneComponent * GetSceneComponentFromReference(const FComponentReference &ComponentRef, const AActor *Owner) Parameters Type Name Description const FComponentReference & ComponentRef const AActor * Owner Returns Type Description USceneComponent * | Improve this Doc View Source IsInEditor() Returns true if we are running in editor (not game mode or VR preview). Declaration public: static bool IsInEditor() Returns Type Description bool"
  },
  "Docs/TouchableVolume.html": {
    "href": "Docs/TouchableVolume.html",
    "title": "Touchable Volume | UXT Documentation",
    "keywords": "Touchable Volume The touchable volume component allows the user to interact with an object by touching it. Usage Create a UxtTouchableVolumeComponent on an Actor. By default, the volume will trigger events when the user interacts with any primitive on the actor. The can be configured by populating the Touchable Primitives set with the primitives that should trigger events, which will limit interaction to only the primitives contained in the set. Events The touchable volume generates several events that can be used to drive interactions: OnBeginFocus : Event raised when a pointer starts focusing the touchable volume. OnUpdateFocus : Event raised when a focusing pointer updates. OnEndFocus : Event raised when a pointer ends focusing the touchable volume. OnBeginPoke : Event raised when a pointer starts poking the touchable volume. OnUpdatePoke : Event raised while a pointer is poking the touchable volume. OnEndPoke : Event raised when a pointer ends poking the touchable volume. OnVolumeEnabled : Event raised when the volume is enabled. OnVolumeDisabled : Event raised when the volume is disabled."
  },
  "Docs/PinchSlider.html": {
    "href": "Docs/PinchSlider.html",
    "title": "Pinch Slider | UXT Documentation",
    "keywords": "Pinch slider A pinch slider component allows the user to continuously change a value by moving the slider thumb along the track. Creating a pinch slider from scratch The first step of creating a slider from scratch is adding the UxtPinchSliderComponent to an actor blueprint. This is a low level component that drives slider logic. The pinch slider visuals are made of three primary components. Slider thumb : This component is required. It's the static mesh that the user interacts with Slider track : This component is optional. It's the static mesh is scaled to match the range of the slider travel Tick marks : This component is optional. It's an instanced static mesh that is used to represent ticks along the track of the slider Add a StaticMeshComponent to the actor and name it \"SliderThumb\" (alternatively, name it something else and and set the ThumbVisuals property of the UxtPinchSliderComponent to reference this new mesh). If you want to add a track to the slider, add a StaticMeshComponent to the actor and name it \"SliderTrack\" (alternatively, name it something else and and set the TrackVisuals property of the UxtPinchSliderComponent to reference this new mesh). If you want to add tick marks to the slider, add an InstancedStaticMesh to the actor, set a mesh for instancing, and name it \"TickMarks\" (alternatively, name it something else and and set the TickMarkVisuals property of the UxtPinchSliderComponent to reference this new instanced mesh). It is important to note that the UxtPinchSliderComponent uses the mesh assigned to the ThumbVisuals property to construct a BoxComponent that is used for grab and far interactions. The UxtPinchSliderComponent uses the mesh extents to create this box collider. If the slider is configured correctly, the slider should now be grabbable via near and far interaction and update its position and value based on user input. Here are the events that you can use to hook the slider value up to you application logic: OnValueUpdated : This event is called whenever user interaction causes the value of the slider to change (i.e. it is moved) OnInteractionStarted : This event is called when a user starts grabbing the slider thumb (either near or far interaction) OnInteractionEnded : This event is called when a user stops grabbing the slider thumb (either near or far interaction) OnFocusEnter : This event is called when a pointer starts giving focus to the slider (either near or far interaction) OnFocusExit : This event is called when a pointer starts giving focus to the slider (either near or far interaction) OnStateUpdated : This event will be called whenever the slider changes its internal state. It supplies a EUxtSliderState value that represents the new state (Default, Focus, Grab). Here is an example of the OnValueUpdated event being used: Instance Editable Properties SliderValue The current value of the slider in 0-1 range SliderStartDistance Where the slider track starts, as distance from center along slider axis, in local space units SliderEndDistance Where the slider track ends, as distance from center along slider axis, in local space units. NumTickMarks Number of tick marks to add to the slider TickMarkScale Scale of the tick marks on the slider ThumbVisuals Visual representation of the slider thumb TrackVisuals Visual representation of the track TickMarkVisuals Visual representation of the tick marks CollisionProfile Collision profile used by the slider thumb"
  },
  "Docs/PalmUpConstraintComponent.html": {
    "href": "Docs/PalmUpConstraintComponent.html",
    "title": "Palm-Up Constraint Component | UXT Documentation",
    "keywords": "Palm-Up Constraint Component Hand constraint specialization that activates only when the palm is facing the player. Usage Create a PalmUpConstraintComponent on an Actor. See Hand constraint documentation for common settings. The Palm-Up constraint will activate when the palm normal is within a cone of size Max Palm Angle of the camera direction. Optionally the constraint can also use a hand flatness condition by enabling the Require Flat Hand option. Flatness is approximated by checking the triangle between palm, index finger tip and ring finger tip. If the triangle aligns to the palm within the Max Flat Hand Angle the hand is considered flat."
  },
  "Docs/InputSimulation.html": {
    "href": "Docs/InputSimulation.html",
    "title": "Input Simulation | UXT Documentation",
    "keywords": "Input Simulation Caution If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Input simulation is using mouse and keyboard input in the editor to simulate a Head-Mounted Display (HMD) as well as hand tracking and other features. This allows testing Mixed-Reality features, such as buttons and interactions, without a physical device. Input simulation is not intended as a long term substitute for actual hardware, but as a development tool to improve iteration times and allow testing in case of limited hardware availability. Input simulation is only enabled in the Unreal editor. Activation Input simulation will become active when playing in the Unreal editor and no head-mounted display (HMD) is connected. If a HMD is connected the input simulation is disabled and camera placement is controlled by the device. Controls Default controls for moving the camera are based on the DefaultPawn: W/S keys for moving forward/backward A/D keys for moving sideways Q/E keys for moving down/up Mouse movement controls head rotation In addition to default pawn movement there are virtual hands that can be controlled for simulating hand tracking: Hold Left Shift/Alt for controlling the left/right hand respectively. This disables head rotation with the mouse and moves the hand instead. Both hands can be controlled together by holding both control keys. T/Y keys for toggling hand visibility. UX Tools project settings contain an option to \"Start with Hands Enabled\". Hands can still be enabled with the T/Y keys even if they are not initially visible. Press the Left mouse button to perform a \"Pinch\" gesture. This also activates the \"grasp\" state of the hand controller, allowing object manipulation. Press the Middle mouse button to perform a \"Poke\" gesture. This can be used for poking buttons. Note that buttons can also be pressed by simply moving the hand towards the button, without performing any gestures. Holding the Right mouse button enables rotation of the controlled hands: X axis changes yaw angle. Y axis changes pitch angle. Scroll wheel changes roll angle. To reset the hand rotation press the visibility keys (T/Y) twice. This will reset the hand location and rotation to defaults. Hand Animation Hand input is simulated with skeletal meshes that are animated according to user input. The main input simulation actor adds two instances of the skeletal hand mesh for the left and right hand respectively. The mesh asset is expected to model the right hand, while the left hand mesh is mirrored on the Y axis. An animation blueprint is used to toggle between different possible hand poses, such as a default relaxed hand, poking with the index finger, or pinching between thumb and index finger. Changing the current pose is bound to user input, usually the left and middle mouse buttons. The animation blueprint handles transition and blending between poses. After the mesh animation, the input simulation actor reads the position and rotation of bones matching the relevant hand joints by name (see EWMRHandKeypoint enum). This data is then passed to the input simulation subsystem to emulate device data when requested. Updating Hand Animation Assets The hand animation is best created from an FBX file. The file should contain: A mesh model for the right hand. A skeleton that animates the mesh. Bones in the skeleton that match the EWMRHandKeypoint enum by name: Palm, Wrist, ThumbMetacarpal, ThumbProximal, ThumbDistal, ThumbTip, IndexMetacarpal, etc.. Note that these bones do not necessarily have to deform the mesh, they only define the simulated joint positions. However, the joint bones should be aligned with the visible mesh to avoid confusion. Animation poses for the relevant hand gestures: Flat, Relaxed, Poke, Pinch, Grab, PalmUp, etc. The FBX file is imported, generating a mesh, skeleton, material(s), and animation assets. Open the hand animation asset that contains the desired hand poses. With Create Asset > Create PoseAsset > Current Animation create a pose asset that can blend between the various hand poses. Open the new pose asset and rename the relevant poses with meaningful names, e.g. \"Flat\", \"Relaxed\", \"Pinch\", \"Poke\". Open the InputSimulationHands_AnimInstance asset. This is the animation blueprint that drives the skeletal animation. In the AnimGraph find the PoseAsset blend node and in the Details panel change the linked pose asset to the one created above."
  },
  "README.html": {
    "href": "README.html",
    "title": "What are the UX Tools? | UXT Documentation",
    "keywords": "What are the UX Tools? UX Tools for Unreal Engine is a UE game plugin with code, blueprints and example assets created to help you add in features commonly needed when you're developing UX for mixed reality applications. The project is still in early development (it provides a small set of features and breaking changes are to be expected) but the current features are complete and robust enough to use in your own projects. NOTE: Only HoloLens 2 development is supported at the moment. Getting started with UX Tools If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey in the Microsoft Docs. The Unreal development journey is specifically tailored to walk new developers through the installation, core concepts, and usage of the UX Tools. CAUTION: The Unreal development journey currently uses UX Tools 0.9.x and Unreal 4.25.3 or later . If you're already familiar with Mixed Reality development in Unreal, you can find the installation instructions for the UX Tools plugin here . Documentation Welcome to UX Tools Feature Guides API Reference Required software Windows SDK 18362+ Unreal 4.25.3 or later Visual Studio 2019 To build apps with MRTK-Unreal and UX Tools, you need the Windows 10 May 2019 Update SDK The Unreal Engine provides support for building mixed reality projects in Windows 10 Visual Studio is used for code editing UX building blocks Input Simulation Hand Interaction Pressable Button Mouse and keyboard input in the editor to simulate a Head-Mounted Display and hand tracking Hand interaction actor that takes care of creating and driving pointers and visuals for interactions A button gives the user a way to trigger an immediate action Pinch Slider Bounds Control Manipulators A component allows the user to continuously change a value by moving the slider thumb along the track A component that allows the user to change the position, rotation, and size of an actor A component that allows an actor to be picked up by a user and then moved, rotated or scaled Follow Behavior Hand Constraints Palm Constraints A component used to keep objects \"following\" the user by applying a set of constraints on the component's owner A component that calculates a goal based on hand tracking and moves the owning actor A hand constraint component specialization that activates only when the palm is facing the player Far Beam A component allowing the user to visualize elements in the scene they can interact with from afar Tools Utilities Graphics Plugin containing a handful of tools that augment the Unreal Engine editor Breakdown of shaders, materials, and graphics techniques used to render UX components Example maps If you want to explore the different UXT features or want a reference for how to use them we recommend having a look at the example maps contained in the UX Tools Game (/UXToolsGame) in this repository. For that you should: Clone this repository. Checkout public/0.9.x. Bear in mind that this branch is alive. It's not a release, and will be updated regularly with potentially breaking changes . There will be a release tag (e.g. release/0.9.0) marked as such in GitHub. You can now open the UX Tools Game (/UXToolsGame) and explore individual example maps or open the Loader level to access some of the examples from a centralized hub. Packaged UX Tools game We also provide the UX Tools game pre-packaged for HoloLens 2 so you can try out the main UXT features directly on device easily. To use it: Obtain the packaged game from the latest release page (e.g. UXTGame-HoloLens.0.9.0.zip ) and unzip it to a local directory. Install it in the device via the Device Portal . Feedback and contributions Due to the early stage of the project and the likelihood of internal refactors, we are not in a position to accept external contributions through pull requests at this time. However, contributions and feedback in the shape of bug reports, suggestions and feature requests are always welcome!"
  },
  "Docs/FarBeam.html": {
    "href": "Docs/FarBeam.html",
    "title": "Far Beam | UXT Documentation",
    "keywords": "Far Beam The far beam component allows the user to visualise elements in the scene they can interact with from afar. If you wish to customise the look of the beam, you can set the beam material by calling SetBeamMaterial with the material you wish to use. This material can have the following parameters if you wish to use them in your material. IsGrabbing : Scalar parameter. This value will be 0.0f if the user is not grabbing with the far cursor, 1.0f if they are. handIndex : Scalar parameter. This value will be 0.0f for the left hand, 1.0f for the right hand. The default material for the far beam has the following parameters: Far Beam Material Interface Base Color Color value for the solid beam Emissive Emissive intensity for the solid beam Gradation Hardness Scalar value to control the gradation hardness Gradation Multiply Scalar value for the gradation of the solid beam Gradation Offset Scalar value for the gradation start position offset Gradation Scale Scalar value to control the gradation scale Dotted Base Color Color value for the dotted beam LineNumber Scalar value to control the dot amount in the beam MiddleFade Scalar value to control the fade-out intensity of the dotted beam MidFadeOffset Scalar value to control the fade-out position of the dotted beam IsGrabbing System value for if the user is currently grabbing handIndex System value used for distinguishing left from right hand"
  },
  "Docs/FollowComponent.html": {
    "href": "Docs/FollowComponent.html",
    "title": "Follow Component | UXT Documentation",
    "keywords": "FollowComponent The FollowComponent is used to keep objects \"following\" the user by applying a set of constraints on the component's owner. Usage Place a FollowComponent on your actor. In this example, we created an empty actor and added some geometry and text to make a panel that we want to keep in front of the user. Since we also want it to always face the user, we've set the \"Orientation Type\" to \"FaceCamera\". Hint: The camera looks down the +X axis, so you may want the front face of your content be in the -X direction. Behavior Details The FollowComponent has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp : The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp : The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation : The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter"
  },
  "Docs/HandInteraction.html": {
    "href": "Docs/HandInteraction.html",
    "title": "Hand Interaction | UXT Documentation",
    "keywords": "Hand interaction Hand interaction with UX elements is performed via the hand interaction actor . This actor takes care of creating and driving the pointers and visuals for near and far interactions. Near interactions are performed by either grabbing elements pinching them between index and thumb or poking at them with the finger tip. While in near interaction mode a finger cursor is displayed on the finger tip to provide feedback about the closest poke target. Far interacions are performed pointing via a ray attached to the hand with selection triggered by pressing index and thumb tips together. A far beam is displayed representing the ray shooting out of the hand. At the end of the beam a far cursor gives feedback about the current far target. Poke and grab targets are defined by adding a component implementing the grab target interface and poke target interface . All visible objects with collision will be hit by the far ray by default but only components implementing the far target interface will receive far interaction events. Provided UX elements like the pressable button implement these interfaces to use interactions to drive their state. Hand interaction actor Add a AUxtHandInteractionActor to the world per hand in order to be able to interact with UX elements. There is no other additional setup required, just remember to set the actors to different hands via their Hand property as by default they use the left hand. See MRPawn in UXToolsGame for an example of hand interaction setup. The actor will automatically create the required components for near and far pointers and their visualization. Properties controlling the setup of these are exposed in the actor directly. A few ones deserving special attention are explained in the following sections. Near activation distance Each hand will transition automatically from far to near interaction mode when close enough to a near interaction target. The near activation distance defines how close the hand must be to the target for this to happen. Trace channel The hand actor and its pointers perform a series of world queries to determine the current interaction target. The trace channel property is used to filter the results of those queries. Default visuals Default visuals are created for near and far cursor and far beam in the form of the following components: Near cursor: UUxtFingerCursorComponent Far cursor: UUxtFarCursorComponent Far beam: UUxtFarBeamComponent In order to allow for custom visuals, their creation can be individually disabled via properties in the advanced section of the Hand Interaction category. See also Mixed Reality Instinctual Interactions : design principles behind the interaction model. IUxtGrabTarget IUxtPokeTarget IUxtFarTarget"
  },
  "api/_u_uxt_follow_component.html": {
    "href": "api/_u_uxt_follow_component.html",
    "title": "Class UUxtFollowComponent | UXT Documentation",
    "keywords": "Class UUxtFollowComponent The follow component has three different constraints that keeps its owner in front of the camera: Angular Clamp, Distance Clamp, and Orientation. The combination of Angular and Distance Clamp creates a frustum in front of the camera where its owner can be. If its owner is outside that frustum it is adjusted. Angular Clamp: The objective of this constraint is to ensure that the reference forward vector remains within the bounds set by the leashing parameters. To do this, determine the angles between toTarget and the leashing bounds about the global Z-axis and the reference's Y-axis. If the toTarget falls within the leashing bounds, then we don't have to modify it. Otherwise, we apply a correction rotation to bring it within bounds. This will ensure that the its owner stays within the top, bottom, right and left planes of the frustum. Distance Clamp: The objective of this constraint is to ensure that the following actor stays within bounds set by the distance parameters. To do this, we measure the current distance from the camera to the its owner. If the distance is within the MinimumDistance and MaximumDistance then we don't have to modify it. Otherwise, we push away or pull in the its owner along the reference forward vector. This will ensure that the its owner stays within the near and far planes of the frustum. Orientation: The two options provided are constant FaceCamera or WorldLock. While world locked there are three conditions that will cause the its owner to face the camera: Angular Clamps Distance Clamps The angle between the forward vector of the its owner and toTarget vector (vector between the camera and the its owner) is larger than dead zone angle parameter Inheritance System::Object UActorComponent UUxtFollowComponent Namespace : Assembly : .dll Syntax public: class UUxtFollowComponent Constructors | Improve this Doc View Source UUxtFollowComponent() Declaration public: UUxtFollowComponent() Fields | Improve this Doc View Source ActorToFollow Actor that this component will follow. If null, this component will follow the camera Declaration public: AActor * ActorToFollow Field Value Type Description AActor * | Improve this Doc View Source bIgnoreAngleClamp Option to ignore angle clamping Declaration public: bool bIgnoreAngleClamp= false Field Value Type Description bool | Improve this Doc View Source bIgnoreCameraPitchAndRoll Option to ignore the pitch and roll of the camera Declaration public: bool bIgnoreCameraPitchAndRoll= false Field Value Type Description bool | Improve this Doc View Source bIgnoreDistanceClamp Option to ignore distance clamping Declaration public: bool bIgnoreDistanceClamp= false Field Value Type Description bool | Improve this Doc View Source bInterpolatePose Option to ignore interpolation between follow poses Declaration public: bool bInterpolatePose= true Field Value Type Description bool | Improve this Doc View Source DefaultDistance Default distance from eye to position its owner around, i.e. the sphere radius Declaration public: float DefaultDistance= 75.0f Field Value Type Description float | Improve this Doc View Source MaximumDistance Max distance from eye to its owner Declaration public: float MaximumDistance= 100.0f Field Value Type Description float | Improve this Doc View Source MaxViewHorizontalDegrees The horizontal angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewHorizontalDegrees= 30.0f Field Value Type Description float | Improve this Doc View Source MaxViewVerticalDegrees The vertical angle from the camera forward axis to the owner will not exceed this value Declaration public: float MaxViewVerticalDegrees= 30.0f Field Value Type Description float | Improve this Doc View Source MinimumDistance Min distance from eye to position its owner around, i.e. the sphere radius Declaration public: float MinimumDistance= 50.0f Field Value Type Description float | Improve this Doc View Source MoveToDefaultDistanceLerpTime Rate at which its owner will move toward default distance when angular leashing Declaration public: float MoveToDefaultDistanceLerpTime= 10.0f Field Value Type Description float | Improve this Doc View Source OrientationType Orientation Type Declaration public: TEnumAsByte<EUxtFollowOrientBehavior> OrientationType= EUxtFollowOrientBehavior::WorldLock Field Value Type Description TEnumAsByte<EUxtFollowOrientBehavior> | Improve this Doc View Source OrientToCameraDeadzoneDegrees The owner will not reorient until the angle between its forward vector and the vector to the camera is greater than this value Declaration public: float OrientToCameraDeadzoneDegrees= 60.0f Field Value Type Description float | Improve this Doc View Source PitchOffset Pitch offset from camera (relative to Max Distance) Declaration public: float PitchOffset= 0.0f Field Value Type Description float | Improve this Doc View Source VerticalMaxDistance Max vertical distance between the owner and camera Declaration public: float VerticalMaxDistance= 0.0f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source Recenter() Force the owner to recenter in the camera's field of view. Declaration public: void Recenter() | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_wmr_hand_tracker.html": {
    "href": "api/_f_uxt_wmr_hand_tracker.html",
    "title": "Class FUxtWmrHandTracker | UXT Documentation",
    "keywords": "Class FUxtWmrHandTracker WMR implementation of the hand tracker interface Inheritance System::Object IModularFeature IUxtHandTracker FUxtWmrHandTracker Inherited Members IUxtHandTracker::GetHandTracker() IUxtHandTracker::GetModularFeatureName() IUxtHandTracker::~IUxtHandTracker() Namespace : Assembly : .dll Syntax public: class FUxtWmrHandTracker : public xtHandTracker Methods | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool Overrides IUxtHandTracker::GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool Overrides IUxtHandTracker::GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool Overrides IUxtHandTracker::GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool Overrides IUxtHandTracker::GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition)"
  },
  "api/_f_uxt_poke_pointer_focus.html": {
    "href": "api/_f_uxt_poke_pointer_focus.html",
    "title": "Struct FUxtPokePointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPokePointerFocus Focus implementation for the poke pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) FUxtPointerFocus::UpdateClosestTarget(const FTransform &PointerTransform) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtPokePointerFocus : public xtPointerFocus Methods | Improve this Doc View Source BeginPoke(UUxtNearPointerComponent *Pointer) Notify the target object that poke has started. Declaration public: void BeginPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source EndPoke(UUxtNearPointerComponent *Pointer) Notify the target object that poke has ended. Declaration public: void EndPoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) | Improve this Doc View Source IsPoking() Declaration public: bool IsPoking() const Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source UpdatePoke(UUxtNearPointerComponent *Pointer) Notify the poked target object that the pointer has been updated. Declaration public: void UpdatePoke(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_poke_target.html": {
    "href": "api/_u_uxt_poke_target.html",
    "title": "Class UUxtPokeTarget | UXT Documentation",
    "keywords": "Class UUxtPokeTarget Inheritance System::Object UInterface UUxtPokeTarget Namespace : Assembly : .dll Syntax public: class UUxtPokeTarget"
  },
  "api/_u_uxt_manipulator_component_base.html": {
    "href": "api/_u_uxt_manipulator_component_base.html",
    "title": "Class UUxtManipulatorComponentBase | UXT Documentation",
    "keywords": "Class UUxtManipulatorComponentBase Base class for manipulation components that react to pointer interactions. This class does not modify the actor as-is. Implementations should use the provided functions to compute a target transform from grabbing pointers and call the ApplyTargetTransform method to actually modify the actor. Inheritance System::Object USceneComponent UUxtGrabTargetComponent UUxtManipulatorComponentBase Inherited Members UUxtGrabTargetComponent::FindGrabPointer(UUxtNearPointerComponent *NearPointer, UUxtFarPointerComponent *FarPointer, bool &Success, FUxtGrabPointerData &PointerData, int &Index) UUxtGrabTargetComponent::ForceEndGrab() UUxtGrabTargetComponent::GetGrabPointCentroid(const FTransform &Transform) UUxtGrabTargetComponent::GetGrabPointCentroidTransform() UUxtGrabTargetComponent::GetGrabPointers() UUxtGrabTargetComponent::GetPrimaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetSecondaryGrabPointer(bool &Valid, FUxtGrabPointerData &PointerData) UUxtGrabTargetComponent::GetTargetCentroid() UUxtGrabTargetComponent::GetTickOnlyWhileGrabbed() UUxtGrabTargetComponent::InteractionMode IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) IUxtGrabTarget::IsGrabFocusable(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::IsGrabFocusable_Implementation(const UPrimitiveComponent *Primitive) UUxtGrabTargetComponent::OnBeginGrab IUxtGrabTarget::OnBeginGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnBeginGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab IUxtGrabTarget::OnEndGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEndGrab_Implementation(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterGrabFocus IUxtGrabTarget::OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnEnterGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitGrabFocus IUxtGrabTarget::OnExitGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnExitGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarDragged_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrab IUxtGrabTarget::OnUpdateGrab(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrab_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrabFocus IUxtGrabTarget::OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::OnUpdateGrabFocus_Implementation(UUxtNearPointerComponent *Pointer) UUxtGrabTargetComponent::SetTickOnlyWhileGrabbed(bool bEnable) UUxtGrabTargetComponent::UUxtGrabTargetComponent() Namespace : Assembly : .dll Syntax public: class UUxtManipulatorComponentBase : public xtGrabTargetComponent Constructors | Improve this Doc View Source ~UUxtManipulatorComponentBase() Declaration public: ~UUxtManipulatorComponentBase() | Improve this Doc View Source UUxtManipulatorComponentBase() Declaration public: UUxtManipulatorComponentBase() Fields | Improve this Doc View Source bAutoSetInitialTransform If true the initial transform will be set automatically when the component is grabbed. Declaration public: bool bAutoSetInitialTransform= true Field Value Type Description bool | Improve this Doc View Source Constraints Declaration protected: UxtConstraintManager * Constraints Field Value Type Description UxtConstraintManager * | Improve this Doc View Source InitialCameraSpaceTransform Declaration public: FTransform InitialCameraSpaceTransform Field Value Type Description FTransform | Improve this Doc View Source InitialTransform Declaration public: FTransform InitialTransform Field Value Type Description FTransform | Improve this Doc View Source MoveLogic Declaration protected: UxtManipulationMoveLogic * MoveLogic Field Value Type Description UxtManipulationMoveLogic * | Improve this Doc View Source OnUpdateTransform Declaration public: FUxtUpdateTransformDelegate OnUpdateTransform Field Value Type Description FUxtUpdateTransformDelegate | Improve this Doc View Source TransformTarget The component to transform, will default to the root scene component if not specified Declaration public: USceneComponent * TransformTarget= nullptr Field Value Type Description USceneComponent * | Improve this Doc View Source TwoHandRotateLogic Declaration protected: UxtTwoHandManipulationRotateLogic * TwoHandRotateLogic Field Value Type Description UxtTwoHandManipulationRotateLogic * | Improve this Doc View Source TwoHandScaleLogic Declaration protected: UxtTwoHandManipulationScaleLogic * TwoHandScaleLogic Field Value Type Description UxtTwoHandManipulationScaleLogic * Methods | Improve this Doc View Source ApplyTargetTransform(const FTransform &TargetTransform) Apply the transform to the actor root scene component. Relative transform between the manipulator component and the root scene component is preserved. Declaration public: void ApplyTargetTransform(const FTransform &TargetTransform) Parameters Type Name Description const FTransform & TargetTransform | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override Overrides UUxtGrabTargetComponent::BeginPlay() | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration protected: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) Translate the source transform such that grab points match targets. If more than one pointer is used then the centroid of the grab points and targets is used. Declaration public: void MoveToTargets(const FTransform &SourceTransform, FTransform &TargetTransform, bool UsePointerRotation) const Parameters Type Name Description const FTransform & SourceTransform FTransform & TargetTransform bool UsePointerRotation | Improve this Doc View Source RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) Rotates the source transform around the pivot point on the given axis such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAboutAxis(const FTransform &SourceTransform, const FVector &Pivot, const FVector &Axis, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot const FVector & Axis FTransform & TargetTransform | Improve this Doc View Source RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) Rotates the source transform around the pivot point such that the pointers line up with current targets. If more than one pointer is used then the resulting rotation will minimize the mean square of target distances. Declaration public: void RotateAroundPivot(const FTransform &SourceTransform, const FVector &Pivot, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform const FVector & Pivot FTransform & TargetTransform | Improve this Doc View Source SetInitialTransform() Cache the initial world space and camera space transform. Manipulation should be based on these initial transform for stable results. If bAutoSetInitialTransform is true then the initial transform is updated when grabbed. Declaration public: void SetInitialTransform() | Improve this Doc View Source SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) Apply a low-pass filter to the source transform location and rotation to smooth out jittering. Target transform is a exponentially weighted average of the current component transform and the source transform based on the time step. Declaration public: void SmoothTransform(const FTransform &SourceTransform, float LocationSmoothing, float RotationSmoothing, float DeltaSeconds, FTransform &TargetTransform) const Parameters Type Name Description const FTransform & SourceTransform float LocationSmoothing float RotationSmoothing float DeltaSeconds FTransform & TargetTransform | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction"
  },
  "api/_f_uxt_runtime_settings_button_set.html": {
    "href": "api/_f_uxt_runtime_settings_button_set.html",
    "title": "Struct FUxtRuntimeSettingsButtonSet | UXT Documentation",
    "keywords": "Struct FUxtRuntimeSettingsButtonSet Namespace : Assembly : .dll Syntax public: struct FUxtRuntimeSettingsButtonSet Fields | Improve this Doc View Source Buttons Declaration public: TSet<EHMDInputControllerButtons> Buttons Field Value Type Description TSet<EHMDInputControllerButtons>"
  },
  "api/_f_uxt_pointer_focus.html": {
    "href": "api/_f_uxt_pointer_focus.html",
    "title": "Struct FUxtPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtPointerFocus Utility class that is used by components to manage different pointers and their focus targets. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocus Constructors | Improve this Doc View Source ~FUxtPointerFocus() Declaration public: virtual ~FUxtPointerFocus() Methods | Improve this Doc View Source ClearFocus(UUxtNearPointerComponent *Pointer) Clear the focused target. Declaration public: void ClearFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) Find the closest primitive and point on the owner of the given component. Declaration protected: FUxtPointerFocusSearchResult FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) const Parameters Type Name Description UActorComponent * Target const FVector & Point Returns Type Description FUxtPointerFocusSearchResult | Improve this Doc View Source FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) Find the closest target object, primitive, and point among the overlaps. Declaration protected: FUxtPointerFocusSearchResult FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) const Parameters Type Name Description const TArray<FOverlapResult> & Overlaps const FVector & Point Returns Type Description FUxtPointerFocusSearchResult | Improve this Doc View Source FindInterfaceComponent(AActor *Owner) Find a component of the actor that implements the required interface. Find a component of the actor that implements the given interface type. Declaration public: UActorComponent * FindInterfaceComponent(AActor *Owner) const Parameters Type Name Description AActor * Owner Returns Type Description UActorComponent * | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const =0 Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool | Improve this Doc View Source GetClosestTargetPoint() Get the closest point on the surface of the focused target Declaration public: const FVector & GetClosestTargetPoint() const Returns Type Description const FVector & | Improve this Doc View Source GetFocusedPrimitive() Get the currently focused primitive component Declaration public: UPrimitiveComponent * GetFocusedPrimitive() const Returns Type Description UPrimitiveComponent * | Improve this Doc View Source GetFocusedTarget() Get the currently focused target object. Declaration public: UObject * GetFocusedTarget() const Returns Type Description UObject * | Improve this Doc View Source GetFocusedTargetChecked() Get the currently focused target object. Returns null if the target does not implement the expected interface. Declaration public: UObject * GetFocusedTargetChecked() const Returns Type Description UObject * | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const =0 Returns Type Description UClass * | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const =0 Parameters Type Name Description UObject * Target Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const =0 Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer | Improve this Doc View Source SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Select the closest primitive from the owner of the given target component. The target component will be the new focus, unless no usable primitive can be found. Declaration public: void SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform UActorComponent * NewTarget | Improve this Doc View Source SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Select and set the focused target among the list of overlaps. Declaration public: void SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform const TArray<FOverlapResult> & Overlaps | Improve this Doc View Source SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) Set the focus to the given target object, primitive, and point on the target. Declaration protected: void SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) Parameters Type Name Description UUxtNearPointerComponent * Pointer const FTransform & PointerTransform UObject * NewTarget UPrimitiveComponent * NewPrimitive const FVector & NewClosestPointOnTarget | Improve this Doc View Source UpdateClosestTarget(const FTransform &PointerTransform) Update the ClosestTargetPoint while focus is locked Declaration public: void UpdateClosestTarget(const FTransform &PointerTransform) Parameters Type Name Description const FTransform & PointerTransform | Improve this Doc View Source UpdateFocus(UUxtNearPointerComponent *Pointer) Notify the focused target of a pointer update. Declaration public: void UpdateFocus(UUxtNearPointerComponent *Pointer) const Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_math_utils_function_library.html": {
    "href": "api/_u_uxt_math_utils_function_library.html",
    "title": "Class UUxtMathUtilsFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtMathUtilsFunctionLibrary Library of utility functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtMathUtilsFunctionLibrary Inherited Members UUxtMathUtilsFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtMathUtilsFunctionLibrary Methods | Improve this Doc View Source CalculateHierarchyBounds(USceneComponent *Component, const FTransform &LocalToTarget, HierarchyBoundsFilter Filter=nullptr) Calculates the composite bounding box and bounding sphere around a component and its children. The optional filter component can be used to ignore specific scene components. Declaration public: static FBoxSphereBounds CalculateHierarchyBounds(USceneComponent *Component, const FTransform &LocalToTarget, HierarchyBoundsFilter Filter=nullptr) Parameters Type Name Description USceneComponent * Component const FTransform & LocalToTarget _u_uxt_math_utils_function_library.HierarchyBoundsFilter Filter Returns Type Description FBoxSphereBounds | Improve this Doc View Source CalculateHierarchyBounds(USceneComponent *Component, HierarchyBoundsFilter Filter=nullptr) Calculates the composite bounding box and bounding sphere around a component and its children, the output is in the space of the component. The optional filter component can be used to ignore specific scene components. Declaration public: static FBoxSphereBounds CalculateHierarchyBounds(USceneComponent *Component, HierarchyBoundsFilter Filter=nullptr) Parameters Type Name Description USceneComponent * Component _u_uxt_math_utils_function_library.HierarchyBoundsFilter Filter Returns Type Description FBoxSphereBounds | Improve this Doc View Source GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Compute minimal rotation between vectors. Declaration public: static FRotator GetRotationBetweenVectors(const FVector &Vector1, const FVector &Vector2) Parameters Type Name Description const FVector & Vector1 const FVector & Vector2 Returns Type Description FRotator | Improve this Doc View Source RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Apply rotation about a pivot point to the transform. Declaration public: static FTransform RotateAboutPivotPoint(const FTransform &Transform, const FRotator &Rotation, const FVector &Pivot) Parameters Type Name Description const FTransform & Transform const FRotator & Rotation const FVector & Pivot Returns Type Description FTransform | Improve this Doc View Source SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Decompose a rotation into swing and twist components. The twist component describes a rotation around the given twist axis, while the swing contains the remaining rotation. Declaration public: static void SwingTwistDecompose(const FRotator &Rotation, const FVector &TwistAxis, FRotator &Swing, FRotator &Twist) Parameters Type Name Description const FRotator & Rotation const FVector & TwistAxis FRotator & Swing FRotator & Twist"
  },
  "api/_uxt_two_hand_manipulation_rotate_logic.html": {
    "href": "api/_uxt_two_hand_manipulation_rotate_logic.html",
    "title": "Class UxtTwoHandManipulationRotateLogic | UXT Documentation",
    "keywords": "Class UxtTwoHandManipulationRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. Each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update with currently available grab pointers to get a new rotation for the object. Inheritance System::Object UxtTwoHandManipulationRotateLogic Inherited Members UxtTwoHandManipulationRotateLogic Namespace : Assembly : .dll Syntax public: class UxtTwoHandManipulationRotateLogic Methods | Improve this Doc View Source Setup(GrabPointers PointerData, const FQuat &HostRotation) Sets up rotation logic by storing initial handle bar and rotation value Declaration public: void Setup(GrabPointers PointerData, const FQuat &HostRotation) Parameters Type Name Description GrabPointers PointerData const FQuat & HostRotation | Improve this Doc View Source Update(GrabPointers PointerData) Updates the rotation based on the current grab pointer locations Declaration public: FQuat Update(GrabPointers PointerData) const Parameters Type Name Description GrabPointers PointerData Returns Type Description FQuat"
  },
  "api/_i_uxt_hand_tracker.html": {
    "href": "api/_i_uxt_hand_tracker.html",
    "title": "Class IUxtHandTracker | UXT Documentation",
    "keywords": "Class IUxtHandTracker Hand tracker device interface. We assume that implementations poll and cache the hand tracking state at the beginning of the frame. This allows us to assume that if a hand is reported as tracked it will remain so for the remainder of the frame, simplifying client logic. Inheritance System::Object IModularFeature IUxtHandTracker Namespace : Assembly : .dll Syntax public: class IUxtHandTracker Constructors | Improve this Doc View Source ~IUxtHandTracker() Declaration public: virtual ~IUxtHandTracker() Methods | Improve this Doc View Source GetHandTracker() Returns the currently registered hand tracker or nullptr if none Declaration public: static IUxtHandTracker * GetHandTracker() Returns Type Description IUxtHandTracker * | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const =0 Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const =0 Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool | Improve this Doc View Source GetModularFeatureName() Declaration public: static FName GetModularFeatureName() Returns Type Description FName | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const =0 Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool"
  },
  "api/_u_x_tools_input_simulation.html": {
    "href": "api/_u_x_tools_input_simulation.html",
    "title": "Class UXToolsInputSimulation | UXT Documentation",
    "keywords": "Class UXToolsInputSimulation Inheritance System::Object ModuleRules UXToolsInputSimulation Namespace : Assembly : .dll Syntax public: class UXToolsInputSimulation Constructors | Improve this Doc View Source UXToolsInputSimulation(ReadOnlyTargetRules Target) Declaration public: UXToolsInputSimulation(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_x_tools_editor.html": {
    "href": "api/_u_x_tools_editor.html",
    "title": "Class UXToolsEditor | UXT Documentation",
    "keywords": "Class UXToolsEditor Inheritance System::Object ModuleRules UXToolsEditor Namespace : Assembly : .dll Syntax public: class UXToolsEditor Constructors | Improve this Doc View Source UXToolsEditor(ReadOnlyTargetRules Target) Declaration public: UXToolsEditor(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_x_tools.html": {
    "href": "api/_u_x_tools.html",
    "title": "Class UXTools | UXT Documentation",
    "keywords": "Class UXTools Inheritance System::Object ModuleRules UXTools Namespace : Assembly : .dll Syntax public: class UXTools Constructors | Improve this Doc View Source UXTools(ReadOnlyTargetRules Target) Declaration public: UXTools(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_transform_constraint.html": {
    "href": "api/_u_uxt_transform_constraint.html",
    "title": "Class UUxtTransformConstraint | UXT Documentation",
    "keywords": "Class UUxtTransformConstraint Base class for all constraints Usage: Derive from this component and implement ApplyConstraint and GetConstraintType. Custom constraints will automatically be picked up by a UxtConstraintManager on the same actor Inheritance System::Object USceneComponent UUxtTransformConstraint Namespace : Assembly : .dll Syntax public: class UUxtTransformConstraint Fields | Improve this Doc View Source HandType Whether this constraint applies to one hand manipulation, two hand manipulation or both. Declaration public: int32 HandType= static_cast<int32>(EUxtGenericManipulationMode::OneHanded | EUxtGenericManipulationMode::TwoHanded) Field Value Type Description int32 | Improve this Doc View Source InteractionMode Whether this constraint applies to near manipulation, far manipulation or both. Declaration public: int32 InteractionMode= static_cast<int32>(EUxtInteractionMode::Near | EUxtInteractionMode::Far) Field Value Type Description int32 | Improve this Doc View Source TargetComponent The component to transform, will default to the root scene component if not specified Declaration public: FComponentReference TargetComponent Field Value Type Description FComponentReference | Improve this Doc View Source WorldPoseOnManipulationStart Declaration protected: FTransform WorldPoseOnManipulationStart Field Value Type Description FTransform Methods | Improve this Doc View Source ApplyConstraint(FTransform &Transform) Applies constraints to transforms during manipulation Declaration public: virtual void ApplyConstraint(FTransform &Transform) const PURE_VIRTUAL( Parameters Type Name Description FTransform & Transform | Improve this Doc View Source GetConstraintType() Enabled manipulation modes. Declaration public: virtual EUxtTransformMode GetConstraintType() const PURE_VIRTUAL( Returns Type Description EUxtTransformMode | Improve this Doc View Source Initialize(const FTransform &WorldPose) Intended to be called on manipulation started Declaration public: virtual void virtual void Initialize(const FTransform &WorldPose) Parameters Type Name Description const FTransform & WorldPose Returns Type Description void virtual void"
  },
  "api/_u_uxt_touchable_volume_component.html": {
    "href": "api/_u_uxt_touchable_volume_component.html",
    "title": "Class UUxtTouchableVolumeComponent | UXT Documentation",
    "keywords": "Class UUxtTouchableVolumeComponent Component that turns the actor it is attached to into a touchable volume. Inheritance System::Object USceneComponent UUxtTouchableVolumeComponent Inherited Members IUxtPokeTarget::GetPokeBehaviour() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtTouchableVolumeComponent : public xtPokeTarget, public xtFarTarget Fields | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the touchable volume. WasFocused indicates if the volume was already focused by another pointer. Declaration public: FUxtVolumeBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtVolumeBeginFocusDelegate | Improve this Doc View Source OnBeginPoke Event raised when a pointer starts poking the touchable volume. Declaration public: FUxtVolumeBeginPokeDelegate OnBeginPoke Field Value Type Description FUxtVolumeBeginPokeDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer ends focusing the touchable volume. IsFocused indicates if the volume is still focused by another pointer. Declaration public: FUxtVolumeEndFocusDelegate OnEndFocus Field Value Type Description FUxtVolumeEndFocusDelegate | Improve this Doc View Source OnEndPoke Event raised when a pointer ends poking the touchable volume. Declaration public: FUxtVolumeEndPokeDelegate OnEndPoke Field Value Type Description FUxtVolumeEndPokeDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtVolumeUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtVolumeUpdateFocusDelegate | Improve this Doc View Source OnUpdatePoke Event raised while a pointer is poking the touchable volume. Declaration public: FUxtVolumeUpdatePokeDelegate OnUpdatePoke Field Value Type Description FUxtVolumeUpdatePokeDelegate | Improve this Doc View Source OnVolumeDisabled Event raised when the volume is disabled. Declaration public: FUxtVolumeDisabledDelegate OnVolumeDisabled Field Value Type Description FUxtVolumeDisabledDelegate | Improve this Doc View Source OnVolumeEnabled Event raised when the volume is enabled. Declaration public: FUxtVolumeEnabledDelegate OnVolumeEnabled Field Value Type Description FUxtVolumeEnabledDelegate | Improve this Doc View Source TouchablePrimitives List of primitives used as touchable targets. If the list is empty then all primitives of the actor are used. Declaration public: TSet<UPrimitiveComponent *> TouchablePrimitives Field Value Type Description TSet<UPrimitiveComponent *> Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnInputTouchBeginHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchBeginHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnInputTouchEndHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchEndHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnInputTouchLeaveHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Declaration protected: void OnInputTouchLeaveHandler(ETouchIndex::Type FingerIndex, UPrimitiveComponent *TouchedComponent) Parameters Type Name Description ETouchIndex::Type FingerIndex UPrimitiveComponent * TouchedComponent | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetEnabled(bool Enabled) Set if the touchable volume is enabled Declaration public: void SetEnabled(bool Enabled) Parameters Type Name Description bool Enabled"
  },
  "api/_u_uxt_runtime_settings.html": {
    "href": "api/_u_uxt_runtime_settings.html",
    "title": "Class UUxtRuntimeSettings | UXT Documentation",
    "keywords": "Class UUxtRuntimeSettings Settings for UXTools . Inheritance System::Object UObject UUxtRuntimeSettings Namespace : Assembly : .dll Syntax public: class UUxtRuntimeSettings Constructors | Improve this Doc View Source UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Declaration public: UUxtRuntimeSettings(const FObjectInitializer &ObjectInitializer) Parameters Type Name Description const FObjectInitializer & ObjectInitializer Fields | Improve this Doc View Source bStartWithHandsEnabled Start With Hands Enabled. Declaration public: bool bStartWithHandsEnabled= true Field Value Type Description bool | Improve this Doc View Source bStartWithPositionalHeadTracking Enable positional head tracking on game start. Declaration public: bool bStartWithPositionalHeadTracking= true Field Value Type Description bool | Improve this Doc View Source DefaultHandPose Default pose when no button is pressed. Declaration public: FName DefaultHandPose= TEXT(\"Relaxed\") Field Value Type Description FName | Improve this Doc View Source DefaultHandPosition Default position of the right hand in camera space. Declaration public: FVector DefaultHandPosition= FVector(40, 20, 0) Field Value Type Description FVector | Improve this Doc View Source HandAnimInstance Animation instance used for animating hand meshes. Declaration public: TSubclassOf<UAnimInstance> HandAnimInstance Field Value Type Description TSubclassOf<UAnimInstance> | Improve this Doc View Source HandMesh Skeletal mesh for animating hands. The skeleton should contain bones that match the names in the EWMRHandKeypoint enum. For more details see the documentation on input simulation. Declaration public: TSoftObjectPtr<USkeletalMesh> HandMesh Field Value Type Description TSoftObjectPtr<USkeletalMesh> | Improve this Doc View Source HandMovementBox Allowed range of hand movement in camera space. Declaration public: FBox HandMovementBox= FBox(FVector(10, -40, -40), FVector(60, 40, 40)) Field Value Type Description FBox | Improve this Doc View Source HandPoseButtonMappings Controller buttons that are pressed along with certain hand poses. Declaration public: TMap<FName, FUxtRuntimeSettingsButtonSet> HandPoseButtonMappings Field Value Type Description TMap<FName, FUxtRuntimeSettingsButtonSet > | Improve this Doc View Source HandRestOrientation Orientation of the right hand in the default pose. This is used to determine limits when rotating the hand. Declaration public: FRotator HandRestOrientation= FRotator(58.991508, -45.549568, -44.187847) Field Value Type Description FRotator | Improve this Doc View Source PrimaryHandPose Pose mapped to the primary pose action. Declaration public: FName PrimaryHandPose= TEXT(\"Pinch\") Field Value Type Description FName | Improve this Doc View Source SecondaryHandPose Pose mapped to the secondary pose action. Declaration public: FName SecondaryHandPose= TEXT(\"Poke\") Field Value Type Description FName | Improve this Doc View Source ShoulderPosition Position of the right shoulder in camera space. Declaration public: FVector ShoulderPosition= FVector(0, 10, -15) Field Value Type Description FVector Methods | Improve this Doc View Source Get() Declaration public: static UUxtRuntimeSettings * Get() Returns Type Description UUxtRuntimeSettings *"
  },
  "Docs/WelcomeToUXTools.html": {
    "href": "Docs/WelcomeToUXTools.html",
    "title": "Welcome to UX Tools | UXT Documentation",
    "keywords": "Welcome to UX Tools UX Tools is the first MRTK-Unreal component to be released and is currently only supported on HoloLens 2. The component plugin includes code, blueprints, and example assets of common UX features for input simulation, hand interaction actors, press-able button components, manipulator components and follow behavior components. Development If you're new to MRTK or Mixed Reality development in Unreal, we recommend starting at the beginning of our Unreal development journey , which was specifically created to walk you through installation, core concepts, and usage. Caution The Unreal development journey currently uses UX Tools 0.9.x and Unreal 4.25.3 or later . If you're working with other configurations it's still recommended that you start there, but you can also refer to the installation instructions . Documentation Versioning We have complete documentation for all release versions, but we recommend using the highest numbered public release branch for stability. Versions can be selected from the dropdown at the top-right of the screen: Getting help If you run into issues caused by UX Tools or have questions about how to do something, please file an issue on the GitHub repo."
  },
  "Docs/Utilities.html": {
    "href": "Docs/Utilities.html",
    "title": "Utilities | UXT Documentation",
    "keywords": "Utilities UX Tools contains a handful of utilities that augment the Unreal Engine editor. Editor Utility Blueprints Editor utilities can be authored using scripted actions . Scripted actions are accessed by right-clicking actors or assets. Align Actors The Align Actors action aides in the layout of UX controls, or any actor type. To access the action select multiple actors you wish to align. Then right-click in a viewport or outliner window. Finally, select Scripted Actions > Align Actors . A properties window will pop up prompting for alignment settings. Note, the first actor selected is used as the alignment origin. The actor's bounds are used to ensure actors don't interpenetrate when aligned. Editor Utility Widgets Editor utility widgets can be used to modify the User Interface (UI) of the Unreal Editor. Icon Brush Editor The Icon Brush Editor editor utility widget aides in editing a UxtIconBrush by visually searching though the characters in a UFont . To open the editor click the \"Open Icon Brush Editor\" button from any UxtIconBrush details panel. Once opened, the editor should display a window similar to the one below: Selecting different icons, outlined in green, will apply the icon selection to the current UxtIconBrush . The Icon Brush Editor comes in handy when selecting new icons for controls. The BP_ButtonHoloLens2 blueprint makes the viewer accessible via the top level details panel :"
  },
  "Docs/ReleaseNotes.html": {
    "href": "Docs/ReleaseNotes.html",
    "title": "Release Notes | UXT Documentation",
    "keywords": "UX Tools 0.9.0 release notes What's new Breaking changes Known issues This release of the UX Tools supports only HoloLens 2. Support for other MR platforms remains a goal for us but is not the current focus. Unreal 4.25 required. What's new HoloLens 2 style buttons Expanding on our previous pressable button work, the toolkit now provides blueprints that mimic HoloLens 2 button visuals and behaviors. The goal of the BP_ButtonHoloLens2 blueprint is to be easily configurable via the details panel. For examples please see the ButtonExample level. A handful of derived BP_ButtonHoloLens2 blueprints exist to exhibit behavior not found on a typical pressable button. These variants include: BP_ButtonHoloLens2Toggle , which displays an additional back plate based on the button's toggle state. BP_ButtonHoloLens2ToggleCheck , which displays a check box icon based on the button's toggle state. BP_ButtonHoloLens2ToggleSwitch , which displays a switch icon based on the button's toggle state. Pinch slider We're increasing our collection of UX controls with another classic: the slider . We now provide a low level component to construct your own sliders with support for both far and near interaction. There's also a simple, customizable slider blueprint for out-of-the-box use. Improved far beam visuals The visuals for the far beam displayed when in far interaction mode now match closely the ones in the HoloLens 2 Shell. The beam is dashed and fades out away from the end points to be less intrusive by default and becomes solid and bends while dragging to give a better sense of physical connection. Generic manipulator improvements Custom manipulation targets The UUxtGenericManipulatorComponent now allows you to target any SceneComponent as the subject for the manipulation. You can find this in the advanced properties for the Generic Manipulator. Interaction mode toggle You can now find an Interaction Mode setting in the UUxtGenericManipulatorComponent that allows you to toggle far or near interaction with the object. Constraint system UUxtGenericManipulatorComponent now comes with a constraint system that allows for more flexible usage of translation, rotation and scale constraints. In this version we've added UUxtMoveAxisConstraint for constraining movement along a certain axis while interacting with an object. There's going to be a variety of other constraints in future releases. Manipulation flags modifiable in Blueprints Flags used by UUxtGenericManipulatorComponent , like Manipulation or Interaction Mode can now be used and set as Bitflags in Blueprints. Performant shaders and material functions New shaders and rendering techniques were added to implement Fluent Design System principles, and remain performant on Mixed Reality devices. Please see the graphics documentation for more information. New editor utility Blueprints and widgets Editor tools were created to make it easier to configure and align UX controls. For more details see the utilities documentation . Configurable front face fraction for buttons Similar to the existing pressed and released fractions on the pressable button, the new FrontFaceCollisionFraction can be used to move the pokable button volume some fraction of the max push distance in front of the visuals front face. Hand constraints Actors can now be made to follow hands by adding this constraint component. The actor will be placed next to the hand without overlapping it. See documentation for details. The Palm-Up constraint is an extended constraint which becomes enabled when the hand is facing the user. This is particularly useful for hand menus. See documentation for details. New touchable volume component Component that emits focus and poke events like the Pressable Button, but uses arbitrary touchable volumes. A primitive component must be added to the same actor. Events can be used in blueprints to react to user interaction. Forced grab cancelation Grab target interactions can now be force-cancelled by calling the ForceEndGrab function. Breaking changes PushBehaviour and MaxPushDistance made private in pressable button component UUxtPressableButtonComponent::PushBehavior and UUxtPressableButtonComponent::MaxPushDistance have been moved to private to enforce MaxPushDistance constraints with compressible buttons (MaxPushDistance is auto calculated for buttons with a compress push behavior). Please use the associated getters/setters from now on. Button states UUxtPressableButtonComponent 's IsFocused() , IsPressed() and IsDisabled() have been have been removed in favor of GetState() . These don't map 1:1, as before it was possible for IsFocused() and IsPressed() to be true simultaneously. GetState() will only give you the primary state of the button (e.g. Pressed). You can track the sub-states of the button using the begin/end events triggered by the button or combinations of overall states. Add option to switch between local and world space for button distances MaxPushDistance is now in button local space. There are two ways of fixing this if you wish the button planes to remain in the same positions in space as they were before updating uxt: If you want button distances in world space, record the value of Max Push Distance , switch the button property Use Absolute Push Distance to true and set Max Push Distance to the old value. If you want button distances in local space, complete step 1. and then switch the button property Use Absolute Push Distance back to false. The Max Push Distance will update automatically. Fix buttons so that they face positive X Buttons now depress towards negative x. This means that buttons will need to be rotated in order to function properly. Open your button blueprint, if you select the pressable button component you'll notice that the button planes are now aligned with the wrong side of the button. You should see a plane drawn with a solid white line on what you used to consider the back of the button visuals. Transform your movable button visuals so that the new front face is at the same location as the old front face, except reflected on the other side of the blueprint origin. Depending on your individual case, You may not need to transform your visuals at all, you may get away with only translating or you may need to both translate and rotate your button visuals. Here's a rough visualization of this reflection: Before Update After Update After Transform • ¦ | • | ¦ | ¦ • | → Front Plane, ¦ → Back Plane, • → Blueprint Origin Translate or rotate any other parts of your button blueprint so that it works with the new button orientation and location (e.g. rotate text to face new front plane, move baseplate so that it aligns with the new back of the button). Wherever this blueprint is used (maps, other blueprints etc.) you will need to rotate the actor 180° around the z-axis. Rename the UxtBoundingBoxManipulatorComponent and related classes to BoundsControl Existing assets referencing those types will have to be re-saved as the redirects for the names changes will be eventually removed. Code references to the renamed types will have to be updated. Shader compilation errors when ray tracing is supported If you are running UE 4.25.0 and your computer's GPU supports ray tracing you must disable UE 4.25 ray tracing support for UXT's custom shaders to compile. To disable ray tracing navigate to C:\\Program Files\\Epic Games\\UE_4.25\\Engine\\Config\\Windows (or where your installation is located), open DataDrivenPlatformInfo.ini and change bSupportsRayTracing=true to bSupportsRayTracing=false This setting change is not required in UE 4.25.1 (or later) or people with Epic's 13205426 changelist. This warning is also in the Getting Started portion of the README. Fix UxtFollowComponent to work with +X convention UUxtFollowComponent now works appropriately, following (Actor's) +X convention. That means that, if an asset was rotated by 180º in any subcomponent to be displayed as expected, that should now be reverted, rotating the Actor appropriately instead. Known issues Visual glitch with BoundsControl when the affordances overlap This can be worked around by preventing the actor from being scaled down past the point at which this occurs. Buttons can be pressed from behind If you stand behind a button you can press it by moving the finger through the button and back. Generic manipulator Rotation about object center via generic manipulator should use wrist rotation. Not working if physics is enabled and mesh is not actor root."
  },
  "Docs/PressableButton.html": {
    "href": "Docs/PressableButton.html",
    "title": "Pressable Button | UXT Documentation",
    "keywords": "Pressable button A button gives the user a way to trigger an immediate action. It is one of the most foundational components in mixed reality. Creating a pressable button from scratch The first step of creating a button from scratch is adding the UxtPressableButtonComponent to an actor blueprint. This is a low level component that drives button logic. This is followed by creating some moving visuals. Moving visuals are essential for pressable button interaction as they're visualizing pressed and released state. Add a StaticMeshComponent (or any SceneComponent ) to the actor and set the visuals property of the UxtPressableButtonComponent to reference this new mesh. Also ensure that the local positive x-axis of this mesh component points in the direction the button is expected to be pushed. Any component children of this mesh will move along with it as the button is pushed. It is important to note that the UxtPressableButtonComponent uses the component assigned to the visuals property to construct a BoxComponent that is used for poke and far interactions. The UxtPressableButtonComponent uses the the visuals property component bounds, and child bounds, to create this box collider. If the button is configured correctly, the button should now react to presses during play. As well as this, the button planes visualizations will be visible in editor while UxtPressableButtonComponent is selected. These planes represent some of the properties of the button. The solid white plane is the front plane. if the finger crosses this plane from the front, the button will be pushed . The front plane aligns with the front face of the BoxComponent discussed earlier The dashed light grey plane is drawn so that it is PressedDistance away from the front plane. If the finger crosses this plane from the front, the button will be pressed . There is more information about this under Pressed Fraction . The solid dark grey plane is drawn so that it is MaxPushDistance away from the front plane. The moving visuals will not move beyond this plane. There is more information about this under Max Push Distance . A distinction is being made here between push and press . A button can be pushed without being pressed. A button will only fire OnButtonPressed once it has been pushed beyond the PressedDistance. If a button needs to respond to push, OnBeginPoke and OnEndPoke can be used. Some buttons may also have static visuals. Static visuals can be created by adding another mesh component, making sure that it is not a child of the moving visuals. Configuring the component hierarchy so that the buttons work should be simple. The only things that are essential are that the pressable button component is not a child of the moving visuals. Also ensure that only visuals that should move with press are children of the moving visuals. Here are some examples of configurations of the button hierarchy that will work: Although this button is behaving correctly, it's not doing anything useful. The pressable button events can be used in a blueprint in order to respond to press/release. There are a few useful events that can be used: OnBeginFocus : This event is called when a pointer starts giving focus to the button. OnUpdateFocus : This event is called for every tick that the button has focus from a pointer. A button will hold focus while it is being pressed. OnEndFocus : This event is called when a pointer stops giving focus to the button. OnBeginPoke : This event is called when a near pointer starts pushing the button. See description above for the difference between a push and a press. OnUpdatePoke : This event is called tick that a pointer is pushing the button. See description above for the difference between a push and a press. OnEndPoke : This event is called when a near pointer stops pushing the button. See description above for the difference between a push and a press. OnButtonPressed : Called when the current push distance of the button exceeds the pressed fraction . OnButtonReleased : Called when the current push distance of the button subceeds the released fraction . OnButtonEnabled : Called when the button is enabled. OnButtonDisabled : Called when the button is disabled. This will not raise a release event if the button is disabled while pressed. Here are some examples of these events in use in the SimpleButton blueprint sample provided with UXT: HoloLens 2 Button Blueprint The HoloLens 2 button blueprint, named BP_ButtonHoloLens2 , is a button blueprint that provides configurable HoloLens 2 Shell style visuals and behaviors. Please see the graphics documentation for more information about the button's shaders and materials. Visual Configuration To aid in the time it takes to configure buttons, a handful of blueprint variables are exposed which react to changes made during edit time and runtime. For example, changing the Button Size from (16, 32, 32) to (16, 64, 32) will automatically scale the button's front and back plates to create a wide button without effecting the button icon or label. Updating the Button Label will automatically adjust the button's text render component. Changing the Button Icon to a new unicode code point will generate the appropriate unicode character to index into a font containing the icon (e.g. Font_SegoeMDL2_Regular_42 ). Note, the font atlas will need to be updated to support any new icons which are not already present within the font atlas. To add a new icon, open the icon font, such as Font_SegoeMDL2_Regular_42 . Under \"Import Options\" select the \"Chars\" property. Paste your icon's unicode character into the \"Chars\" property and save the font. Finally reimport the font uasset. Scripting Logic All UxtPressableButtonComponent events are passed up to the parent BP_ButtonHoloLens2 via the BP_BaseButton base class. So, any BP_BaseButton variables in other blueprints can easily bind to button events from the variable details panel without having to search for a child button component. In the below example \"Hello\" is printed when a BP_BaseButton , or any derived classes, are pressed: HoloLens 2 Button Variants A handful of derived BP_ButtonHoloLens2 blueprints exist to exhibit behavior not found on a typical pressable button. These variants include: BP_ButtonHoloLens2Toggle , displays an additional back plate based on the button's toggle state. BP_ButtonHoloLens2ToggleCheck , displays a check box icon based on the button's toggle state. BP_ButtonHoloLens2ToggleSwitch , displays a switch icon based on the button's toggle state. Public Properties Push Behavior How the visuals should react when the button is pressed. Translate means the visuals move move along the local x-axis. Compress means the visuals will scale along the x-axis. Note, when compressed the visual's pivot should align with the back face of the compressible region. In other words, the plane visualized by the max push distance . Max Push Distance The maximum distance the button can move. Pressed Fraction The fraction of the maximum push distance that an unpressed button needs to be pushed in order for the button pressed event to fire. Released Fraction The fraction of the maximum push distance that a pressed button needs to be pushed in order for the button released event to fire. Recovery Speed The speed at which the button visuals return to the their resting position when no longer being touched by near interaction or selected using far interaction. Front Face Collision Margin The distance in front of the visuals front face to place the front of the button box collider. Visuals A reference to the scene component that represents the moving part of the button. The extents of the button collider will also be constructed using this scene component and child bounds. Collision Profile The collision profile used for the button collider, which is constructed using the moving visuals mesh component extents."
  },
  "Docs/Manipulator.html": {
    "href": "Docs/Manipulator.html",
    "title": "Manipulator Component | UXT Documentation",
    "keywords": "Manipulator Components Manipulator components allow an actor to be picked up by a user and then moved, rotated or scaled. Generic Manipulator The Generic Manipulator component is a general-purpose implementation of the Manipulator Component Base . It supports both one and two-handed manipulation with a number of configurable settings to change its behavior. One-handed manipulation If one-handed manipulation is enabled the actor can be moved with just one hand. This mode supports movement and rotation, but not scaling of the actor. The way hand rotation translates into actor rotation depends on the One Hand Rotation Mode : Maintain Original Rotation : Does not rotate object as it is being moved. Rotate About Object Center : Only works for articulated hands/controllers. Rotate object using rotation of the hand/controller, but about the object center point. Useful for inspecting at a distance. Rotate About Grab Point : Only works for articulated hands/controllers. Rotate object as if it was being held by hand/controller. Useful for inspection. Maintain Rotation To User : Maintains the object's original rotation for Y/Z axis to the user. Gravity Aligned Maintain Rotation To User : Maintains object's original rotation to user, but makes the object vertical. Useful for bounding boxes. Face User : Ensures object always faces the user. Useful for slates/panels. Face Away From User : Ensures object always faces away from user. Useful for slates/panels that are configured backwards. Two-handed manipulation If two-handed manipulation is enabled the actor can be moved, rotated, and scaled by grabbing it with both hands. Each of these actions can be enabled or disabled separately as needed, e.g. an actor can have rotation and scaling enabled while movement is disabled. Movement uses the center point between both hands, so each hand contributes half of the translation. Rotation is based on imaginary axis between both hands. The actor will rotate with the change of this axis, while avoiding roll around it. Scaling uses the change in distance between hands. Smoothing The generic manipulator has a simple smoothing option to reduce jittering from noisy input. This becomes especially important with one-handed rotation, where hand tracking can be unreliable and the resulting transform amplifies jittering. The smoothing method is based on a low-pass filter that gets applied to the source transform location and rotation. The resulting actor transform T_final is a exponentially weighted average of the current transform T_current and the raw target transform T_target based on the time step: T_final = Lerp( T_current, T_target, Exp(-Smoothing * DeltaSeconds) ) Notes When using the Generic Manipulator with a Procedural Mesh , you will need to: Disable \"Use Complex as Simple Collision\" on the Procedural Mesh . Set \"Create Collision\" when creating the Procedural Mesh . This is due to UXTools only querying for simple collision volumes when detecting interaction targets, in order to ensure correct detection in all situations. You can read more about simple vs complex collisions here ."
  },
  "Docs/Installation.html": {
    "href": "Docs/Installation.html",
    "title": "Installation Guide | UXT Documentation",
    "keywords": "Installation Guide Prerequisites Before getting started with UX Tools, make sure that you have installed the required tools . Getting the prebuilt plugin If you just want to add UXT to your game project, the quickest way is through the packaged plugin provided in the release page: Download the packaged plugin zip from the latest release page (e.g. UXTools.0.9.0.zip ). Unzip the file directly into your project's Plugins folder. The Plugins folder should be located at the root of your project, where the .uproject file is. Create it if it doesn't exist. Make sure your game project is a code one, as opposed to blueprint-only, if you are planning to package it for HoloLens. Otherwise UE will fail to package it because it can't build the plugin sources. Open your project and enable the UX Tools plugin in the plugins menu. You now have access to all of the plugin features. The first thing you want to do is probably add a hand interaction actor per hand to your map or pawn so you can use your hands to drive the controls and behaviors provided in UXT. Next steps HoloLens 2 tutorial series Unreal development journey"
  },
  "Docs/HandConstraintComponent.html": {
    "href": "Docs/HandConstraintComponent.html",
    "title": "Hand Constraint Component | UXT Documentation",
    "keywords": "Hand Constraint Component Component that calculates a goal based on hand tracking and moves the owning actor. It keeps the actor position and rotation aligned with a hand while avoiding overlap with fingers. Several zones around the hand supported: radial and ulnar for the thumb side and its opposite, as well as above and below the hand. The goal position is computed by casting a ray in the direction of the one at a bounding box around the hand joints. The constraint can be oriented on either the hand rotation alone or facing the player. Usage Create a HandConstraintComponent on an Actor. Set the Hand property to select which hand should be tracked. If 'Any Hand' is selected, the first tracked hand will be used and switch to the opposite when tracking is lost. The Zone defines the general area around the hand that the actor is placed in. GoalMargin can be used to increase the distance from the hand for larger actors. At runtime the component will move the actor towards the goal position and rotation. Movement can be disabled with the MoveOwningActor option. In that case the goal position and rotation will still be computed and can be used in blueprints. The component will by default use smoothing to avoid jittering artifacts resulting from hand tracking. Smoothing can be disabled by setting LocationLerpTime and/or RotationLerpTime properties to zero. The higher these values, the more smoothing will be applied and the longer it will take for the actor to reach the goal. Rotation Modes Two main rotation modes are supported: Look-at-Camera : The actor X axis is oriented towards the player head, with Z in the global \"up\" direction. Hand Rotation : The actor aligns with the palm. X axis is facing the inside of the palm, Z aligns with the direction of fingers. The zone direction and the rotation can be configured independently. For example the zone offset can be aligned with the palm, while the rotation faces the camera: Constraint Activation The constraint becomes active when a usable hand could be found, which matches the Hand property. If Any Hand is selected, either left or right hand will be used, depending on which hand starts tracking first. If the current Tracked Hand is lost the opposite hand will be used. The constraint becomes inactive when neither hand is found. By default the constraint will always have a valid goal if a usable hand is tracking. Extended constraint variants can have further conditions, such as the Palm-Up constraint which only becomes when the hand faces the camera. Events Constraint Activated/Deactivated : Called when the constraint becomes active or inactive respectively. The basic HandConstraintComponent only deactivates when hand tracking is lost. Extended hand constraint classes can have additional conditions. For example the Palm-Up constraint also requires that the palm is facing the camera. Begin/End Tracking : Called when a hand starts tracking or when tracking is lost. This includes the case where the Hand settings is 'Any Hand' and tracking switches from one hand to the other. In this case first the EndTracking event for the old hand is called and then the BeginTracking event for the new hand."
  },
  "Docs/Graphics.html": {
    "href": "Docs/Graphics.html",
    "title": "Graphics | UXT Documentation",
    "keywords": "Graphics UX Tools contains a handful of graphics and rendering techniques to implement Fluent Design System principles, and remain performant on Mixed Reality devices. Materials Many mobile stereo headsets are fill rate bound, to reduce fill rate materials should be as simple, or inexpensive as possible. A handful of inexpensive material instances are included with the toolkit which derive from M_SimpleLit_Color. M_SimpleLit_Color uses the Unreal unlit lighting model to avoid extra computations, but uses the MF_SimpleLit material function to perform basic realtime Blinn-Phong lighting on a single (virtual) directional light. The virtual directional light's properties are passed in via the MPC_UXSettings material parameter collection . Note Unreal's built in light types are not included within MF_SimpleLit calculations. MPC_UXSettings contains global shader constants that are used to drive lighting effects as well as UI effects. For example, the left and right pointer positions are updated each frame within MPC_UXSettings to drive lighting effects emitted from the hand interaction pointers. Shaders To achieve visual parity with the HoloLens 2 shell, a couple of shaders exist in the \"UX Tools plugin root\"/Shaders/Public/ directory. A shader source directory mapping is created by the UX Tools plugin to allow any UE4 material to reference shaders within that directory as /Plugin/UXTools/Public/Shader_Name.ush . Note Note, many of the shaders within this directory are generated from an external tool, and are not formatted for user readability. A couple of shaders are described below in more detail, as well as any special considerations which must be made when using the shader. Button Box The M_ButtonBox material and Bounding_Box.ush shader generate glowing edges on a cube with optional circular blob. The blob appears only on the active face set with the Blob_Active_Face parameter. The shader must be used with the correct corresponding cube model. The special model enables the shader to render only the visible areas of the surfaces. The last two letters of the SM_FrontPlate_xx model name indicates which face is active. For example, SM_FrontPlate_PY indicates the positive y-axis. Rounded Edge Thick The M_RoundedEdgeThick material and Rounded_Edge_Thick.ush shader are designed to render a quad as an outlined rounded rectangle with depth. The shader works with a special mesh that approximates the round corners using triangles and includes additional information for anti-aliased silhouette edges. UX Tools includes several models named SM_BackPlateRoundedThick_# where # is the number of triangles per rounded corner. Use the model with the fewest triangles that works for your scenario. Thick Finger Ring The M_FingerTipRing material and Thick_Finger_Ring.ush shader with the M_FingerTipRing model are used to create a volumetric finger tip affordance. Bounding Box The M_BoundsControl material and Bounding_Box.ush shader generate glowing edges on a cube with optional glowing blob and on/off transition effect. The shader must be used with the SM_BoundsControl model. The special models enable the shader to render only the visible areas of the box surfaces. The above shader uses additive blending; if alpha blending is preferred a second method of creating the Bounding Box effects exists which works by splitting the box affordance into parts: The finger tip blob visuals are rendered using the SM_BoundsControlFace model with the M_BoundsControlFace material. Six copies of the SM_BoundsControlEdge model are scaled and offset to create the bound edges and rendered with the M_BoundsControlEdge shader. See also Pressable button component Bounds Control"
  },
  "Docs/CONTRIBUTING.html": {
    "href": "Docs/CONTRIBUTING.html",
    "title": "Contributing | UXT Documentation",
    "keywords": "Contributing to UX Tools for Unreal Engine Due to the early stage of the project and the likelihood of internal refactors, we are not in a position to accept external contributions via pull requests at this time. However, contributions and feedback in the shape of bug reports, suggestions and feature requests are welcome and encouraged. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments."
  },
  "Docs/BoundsControl.html": {
    "href": "Docs/BoundsControl.html",
    "title": "Bounds Control | UXT Documentation",
    "keywords": "BoundsControl Bounds Control is a component that allows the user to change the position, rotation, and size of an actor, using affordances . Affordances are grabbable areas on corners, edges, and faces of the actor's bounding box. To enable bounds control on an actor, add a UxtBoundsControl component. The component has a default configuration that can be tweaked to change the behavior and appearance as needed. Bounds Control Presets These presets configure the overall set of affordances that are created and the way they affect the actor transform: Default : Uniform resizing with corners and rotation with edges. Slate2D : Only front corners and edges are shown, all resize. AllResize : Full set of affordances, all resizing. AllTranslate : Full set of affordances, all translating. AllScale : Full set of affordances, all scaling. AllRotate : Full set of affordances, all rotating. Affordance Configuration There are four types of affordances: Corner : Each corner of the bounding box. Can move in all three dimensions. Edge : Middle of each edge of the bounding box. Movement is restricted to the plane perpendicular to the edge. Face : Center of each side of the bounding box. Movement is restricted to the axis along the face normal. Center : Center of the bounding box (not enabled by default). Grabbing and moving an affordance can be configured for different effects on the actor transform: Resize : Move only one side of the bounding box. Translate : Move both sides of the bounding box in parallel. Scale : Scale the bounding box, moving both sides in opposite directions. Rotate : Rotate the bounding box about its center point. Affordance classes To modify the appearance of the affordances the user can replace the default classes used by the bounds control. A different class is used for each of the four kinds of affordance (Corner, Edge, Face, Center). These classes are instantiated at runtime by the bounds control component to create grabbable actors. When creating custom affordance blueprints a few conditions should be kept in mind: The affordance should by default be oriented in the forward , right , up direction. Each affordance instance is rotated by the bounds control to match its placement on the bounding box. The affordance should have a UxtGrabTargetComponent to make it grabbable. The bounds control will use these components to react to user input. The affordance does not need to handle user input or grab events itself. It is automatically placed by the bounds control. For customizing affordances it is recommended to use the BoundsControl/BP_DefaultAffordanceBase blueprint as a base class or copy it."
  },
  "api/_u_uxt_palm_up_constraint_component.html": {
    "href": "api/_u_uxt_palm_up_constraint_component.html",
    "title": "Class UUxtPalmUpConstraintComponent | UXT Documentation",
    "keywords": "Class UUxtPalmUpConstraintComponent Hand constraint component that becomes active if the hand is facing the player camera. The palm must be facing the camera for the constraint to be active. Optionally the hand can also be rejected if it isn't flat. Inheritance System::Object UActorComponent UUxtHandConstraintComponent UUxtPalmUpConstraintComponent Inherited Members UUxtHandConstraintComponent::BeginPlay() UUxtHandConstraintComponent::bMoveOwningActor UUxtHandConstraintComponent::GetGoalLocation() UUxtHandConstraintComponent::GetGoalRotation() UUxtHandConstraintComponent::GetHandBounds() UUxtHandConstraintComponent::GetTrackedHand() UUxtHandConstraintComponent::GoalMargin UUxtHandConstraintComponent::Hand UUxtHandConstraintComponent::IsConstraintActive() UUxtHandConstraintComponent::LocationLerpTime UUxtHandConstraintComponent::OffsetMode UUxtHandConstraintComponent::OnBeginTracking UUxtHandConstraintComponent::OnConstraintActivated UUxtHandConstraintComponent::OnConstraintDeactivated UUxtHandConstraintComponent::OnEndTracking UUxtHandConstraintComponent::RotationLerpTime UUxtHandConstraintComponent::RotationMode UUxtHandConstraintComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) UUxtHandConstraintComponent::UUxtHandConstraintComponent() UUxtHandConstraintComponent::Zone Namespace : Assembly : .dll Syntax public: class UUxtPalmUpConstraintComponent : public xtHandConstraintComponent Fields | Improve this Doc View Source bRequireFlatHand If true then the hand needs to be flat to be accepted. The triangle between index, ring finger, and palm needs to be aligned with the palm within MaxFlatHandAngle. Declaration public: bool bRequireFlatHand= false Field Value Type Description bool | Improve this Doc View Source MaxFlatHandAngle Maximum allowed angle between palm and index/ring finger/palm triangle to be considered a flat hand. Declaration public: float MaxFlatHandAngle= 45.0f Field Value Type Description float | Improve this Doc View Source MaxPalmAngle Maximum allowed angle between the negative palm normal and view vector. If the angle exceeds the limit the hand is not used. Declaration public: float MaxPalmAngle= 80.0f Field Value Type Description float Methods | Improve this Doc View Source IsHandUsableForConstraint(EControllerHand NewHand) Returns true if the given hand is eligible for the constraint. If the hand is rejected the constraint will be deactivated. Declaration public: virtual bool IsHandUsableForConstraint(EControllerHand NewHand) const override Parameters Type Name Description EControllerHand NewHand Returns Type Description bool Overrides UUxtHandConstraintComponent::IsHandUsableForConstraint(EControllerHand NewHand)"
  },
  "api/_u_uxt_near_pointer_component.html": {
    "href": "api/_u_uxt_near_pointer_component.html",
    "title": "Class UUxtNearPointerComponent | UXT Documentation",
    "keywords": "Class UUxtNearPointerComponent Adds poke and grab interactions to an actor. It keeps track of all overlapping poke targets and raises focus events on the closest one. Targets use the transform of pointers focusing them to drive their interactions. Inheritance System::Object UActorComponent UUxtPointerComponent UUxtNearPointerComponent Inherited Members UUxtPointerComponent::bFocusLocked UUxtPointerComponent::GetCursorTransform() UUxtPointerComponent::GetFocusLocked() UUxtPointerComponent::GetFocusTarget() UUxtPointerComponent::Hand UUxtPointerComponent::SetFocusLocked(bool bLocked) UUxtPointerComponent::UUxtPointerComponent() Namespace : Assembly : .dll Syntax public: class UUxtNearPointerComponent : public xtPointerComponent Constructors | Improve this Doc View Source ~UUxtNearPointerComponent() Declaration public: virtual ~UUxtNearPointerComponent() | Improve this Doc View Source UUxtNearPointerComponent() Declaration public: UUxtNearPointerComponent() Fields | Improve this Doc View Source DebounceDepth The distance the fingertip must be from a pokeable in order to fire a poke end event. This is used in order to distinguish the queries for poke begin and poke end so you cannot easily cause end touch to fire one frame and begin touch to fire on the next frame. Declaration public: float DebounceDepth= 0.5f Field Value Type Description float | Improve this Doc View Source GrabFocus Focus of the grab pointer Declaration protected: FUxtGrabPointerFocus * GrabFocus Field Value Type Description FUxtGrabPointerFocus * | Improve this Doc View Source GrabRadius Declaration public: float GrabRadius= 3.5f Field Value Type Description float | Improve this Doc View Source PokeDepth The depth beyond the front face at which a front face pokable no longer recieves poke events. While poking a front face pokable, if the near pointer moves beyond this depth, the pokable will receive a poke end event. Declaration public: float PokeDepth= 20.0f Field Value Type Description float | Improve this Doc View Source PokeFocus Focus of the poke pointer Declaration protected: FUxtPokePointerFocus * PokeFocus Field Value Type Description FUxtPokePointerFocus * | Improve this Doc View Source PokeRadius Declaration public: float PokeRadius= 0.75f Field Value Type Description float | Improve this Doc View Source ProximityRadius Declaration public: float ProximityRadius= 11.0f Field Value Type Description float | Improve this Doc View Source TraceChannel Declaration public: TEnumAsByte<ECollisionChannel> TraceChannel= ECollisionChannel::ECC_Visibility Field Value Type Description TEnumAsByte<ECollisionChannel> Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetCursorTransform() Declaration public: virtual FTransform GetCursorTransform() const override Returns Type Description FTransform | Improve this Doc View Source GetFocusedGrabTarget(FVector &OutClosestPointOnTarget) Returns currently focused grab target or null if there is none. Declaration public: UObject * GetFocusedGrabTarget(FVector &OutClosestPointOnTarget) const Parameters Type Name Description FVector & OutClosestPointOnTarget Returns Type Description UObject * | Improve this Doc View Source GetFocusedPokeTarget(FVector &OutClosestPointOnTarget) Returns currently focused poke target or null if there is none. Declaration public: UObject * GetFocusedPokeTarget(FVector &OutClosestPointOnTarget) const Parameters Type Name Description FVector & OutClosestPointOnTarget Returns Type Description UObject * | Improve this Doc View Source GetFocusTarget() Declaration public: virtual UObject * GetFocusTarget() const override Returns Type Description UObject * | Improve this Doc View Source GetGrabPointerTransform() Declaration public: FTransform GetGrabPointerTransform() const Returns Type Description FTransform | Improve this Doc View Source GetIsPoking() Declaration public: bool GetIsPoking() const Returns Type Description bool | Improve this Doc View Source GetPokePointerRadius() Declaration public: float GetPokePointerRadius() const Returns Type Description float | Improve this Doc View Source GetPokePointerTransform() Declaration public: FTransform GetPokePointerTransform() const Returns Type Description FTransform | Improve this Doc View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool | Improve this Doc View Source SetActive(bool bNewActive, bool bReset=false) Declaration public: virtual void SetActive(bool bNewActive, bool bReset=false) override Parameters Type Name Description bool bNewActive bool bReset | Improve this Doc View Source SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused grab target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedGrabTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool | Improve this Doc View Source SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Set a focused poke target explicitly which will receive grasp events. If bEnableFocusLock is true, then the new focus target will be locked until released by calling SetFocusLocked. Declaration public: bool SetFocusedPokeTarget(UActorComponent *NewFocusedTarget, bool bEnableFocusLock) Parameters Type Name Description UActorComponent * NewFocusedTarget bool bEnableFocusLock Returns Type Description bool | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration public: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source UpdatePokeInteraction() Update poke distances and detect if poking the target. Declaration public: void UpdatePokeInteraction()"
  },
  "api/_uxt_constraint_manager.html": {
    "href": "api/_uxt_constraint_manager.html",
    "title": "Class UxtConstraintManager | UXT Documentation",
    "keywords": "Class UxtConstraintManager Manages constraints for a given object and ensures that Scale/Rotation/Translation constraints are executed separately. Inheritance System::Object UxtConstraintManager Namespace : Assembly : .dll Syntax public: class UxtConstraintManager Constructors | Improve this Doc View Source UxtConstraintManager(AActor &OwningActor) Registers all transform constraints attached to the actor. Declaration public: UxtConstraintManager(AActor &OwningActor) Parameters Type Name Description AActor & OwningActor Methods | Improve this Doc View Source ApplyRotationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies rotation constraint to transform Declaration public: void ApplyRotationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source ApplyScaleConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies scale constraint to transform Declaration public: void ApplyScaleConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source ApplyTranslationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) Applies translation constraint to transform Declaration public: void ApplyTranslationConstraints(FTransform &Transform, bool IsOneHanded, bool IsNear) const Parameters Type Name Description FTransform & Transform bool IsOneHanded bool IsNear | Improve this Doc View Source Initialize(FTransform &WorldPose) Initialized all registered transform constraints Declaration public: void Initialize(FTransform &WorldPose) Parameters Type Name Description FTransform & WorldPose | Improve this Doc View Source Update(const FTransform &TargetTransform) Compares existing registered constraints with up to date constraint list attached to actor Declaration public: void Update(const FTransform &TargetTransform) Parameters Type Name Description const FTransform & TargetTransform"
  },
  "api/_i_uxt_grab_target.html": {
    "href": "api/_i_uxt_grab_target.html",
    "title": "Class IUxtGrabTarget | UXT Documentation",
    "keywords": "Class IUxtGrabTarget Interface for components that can be grabbed. Inheritance System::Object IUxtGrabTarget Namespace : Assembly : .dll Syntax public: class IUxtGrabTarget Methods | Improve this Doc View Source IsGrabFocusable(const UPrimitiveComponent *Primitive) Returns true if the given primitive should be considerered a valid focus target. Declaration public: bool IsGrabFocusable(const UPrimitiveComponent *Primitive) Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer starts grabbing while overlapping the actor. Declaration public: void OnBeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer stops grabbing or stops overlapping the actor while grabbing. Declaration public: void OnEndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer focuses the actor. Declaration public: void OnEnterGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer stops focusing the actor. Declaration public: void OnExitGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrab(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while grabbing. Declaration public: void OnUpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Raised when a pointer has been updated while focused. Declaration public: void OnUpdateGrabFocus(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_f_u_x_tools_module.html": {
    "href": "api/_f_u_x_tools_module.html",
    "title": "Class FUXToolsModule | UXT Documentation",
    "keywords": "Class FUXToolsModule Inheritance System::Object IModuleInterface FUXToolsModule Namespace : Assembly : .dll Syntax public: class FUXToolsModule Methods | Improve this Doc View Source ShutdownModule() Declaration public: virtual void ShutdownModule() override | Improve this Doc View Source StartupModule() IModuleInterface implementation Declaration public: virtual void StartupModule() override"
  },
  "api/_f_uxt_pressable_button_component_visualizer.html": {
    "href": "api/_f_uxt_pressable_button_component_visualizer.html",
    "title": "Class FUxtPressableButtonComponentVisualizer | UXT Documentation",
    "keywords": "Class FUxtPressableButtonComponentVisualizer Inheritance System::Object FComponentVisualizer FUxtPressableButtonComponentVisualizer Namespace : Assembly : .dll Syntax public: class FUxtPressableButtonComponentVisualizer"
  },
  "api/_f_uxt_pointer_focus_search_result.html": {
    "href": "api/_f_uxt_pointer_focus_search_result.html",
    "title": "Struct FUxtPointerFocusSearchResult | UXT Documentation",
    "keywords": "Struct FUxtPointerFocusSearchResult Result of closest point search functions. Namespace : Assembly : .dll Syntax public: struct FUxtPointerFocusSearchResult Fields | Improve this Doc View Source ClosestPointOnTarget Closest point on the primitive to the pointer position. Declaration public: FVector ClosestPointOnTarget Field Value Type Description FVector | Improve this Doc View Source MinDistance Distance of the closest point to the pointer position. Declaration public: float MinDistance Field Value Type Description float | Improve this Doc View Source Primitive Primitive that contains the closes point. Declaration public: UPrimitiveComponent * Primitive Field Value Type Description UPrimitiveComponent * | Improve this Doc View Source Target Closest object that implements the requires pointer target interface. Declaration public: UObject * Target Field Value Type Description UObject * Methods | Improve this Doc View Source IsValid() Declaration public: bool IsValid() const Returns Type Description bool"
  },
  "api/_f_uxt_icon_brush.html": {
    "href": "api/_f_uxt_icon_brush.html",
    "title": "Struct FUxtIconBrush | UXT Documentation",
    "keywords": "Struct FUxtIconBrush Structure which contains data representing an icon's appearance. Icons are currently represented as Unicode characters or strings, but in the future could be textures, models, etc. Namespace : Assembly : .dll Syntax public: struct FUxtIconBrush Fields | Improve this Doc View Source IconContentType Describes what the icon brush content represents. Declaration public: EUxtIconBrushContentType IconContentType Field Value Type Description EUxtIconBrushContentType | Improve this Doc View Source IconFont The font used by the IconString. Declaration public: UFont * IconFont Field Value Type Description UFont * | Improve this Doc View Source IconString String of characters representing a Unicode symbol, or a literal string. Declaration public: FString IconString Field Value Type Description FString"
  },
  "api/_f_uxt_grab_pointer_focus.html": {
    "href": "api/_f_uxt_grab_pointer_focus.html",
    "title": "Struct FUxtGrabPointerFocus | UXT Documentation",
    "keywords": "Struct FUxtGrabPointerFocus Focus implementation for the grab pointers. Inherited Members FUxtPointerFocus::ClearFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::FindClosestPointOnComponent(UActorComponent *Target, const FVector &Point) FUxtPointerFocus::FindClosestTarget(const TArray<FOverlapResult> &Overlaps, const FVector &Point) FUxtPointerFocus::FindInterfaceComponent(AActor *Owner) FUxtPointerFocus::GetClosestTargetPoint() FUxtPointerFocus::GetFocusedPrimitive() FUxtPointerFocus::GetFocusedTarget() FUxtPointerFocus::GetFocusedTargetChecked() FUxtPointerFocus::SelectClosestPointOnTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UActorComponent *NewTarget) FUxtPointerFocus::SelectClosestTarget(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, const TArray<FOverlapResult> &Overlaps) FUxtPointerFocus::SetFocus(UUxtNearPointerComponent *Pointer, const FTransform &PointerTransform, UObject *NewTarget, UPrimitiveComponent *NewPrimitive, const FVector &NewClosestPointOnTarget) FUxtPointerFocus::UpdateClosestTarget(const FTransform &PointerTransform) FUxtPointerFocus::UpdateFocus(UUxtNearPointerComponent *Pointer) FUxtPointerFocus::~FUxtPointerFocus() Namespace : Assembly : .dll Syntax public: struct FUxtGrabPointerFocus : public xtPointerFocus Methods | Improve this Doc View Source BeginGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has started. Declaration public: void BeginGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source EndGrab(UUxtNearPointerComponent *Pointer) Notify the target object that grab has ended. Declaration public: void EndGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) Find the closest point on the given primitive using the distance function of the target interface. Declaration protected: virtual bool GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) const override Parameters Type Name Description const UActorComponent * Target const UPrimitiveComponent * Primitive const FVector & Point FVector & OutClosestPoint Returns Type Description bool Overrides FUxtPointerFocus::GetClosestPointOnTarget(const UActorComponent *Target, const UPrimitiveComponent *Primitive, const FVector &Point, FVector &OutClosestPoint) | Improve this Doc View Source GetInterfaceClass() Get the interface class that targets for the pointer must implement. Declaration protected: virtual UClass * GetInterfaceClass() const override Returns Type Description UClass * Overrides FUxtPointerFocus::GetInterfaceClass() | Improve this Doc View Source ImplementsTargetInterface(UObject *Target) Returns true if the given object implements the required target interface. Declaration protected: virtual bool ImplementsTargetInterface(UObject *Target) const override Parameters Type Name Description UObject * Target Returns Type Description bool Overrides FUxtPointerFocus::ImplementsTargetInterface(UObject *Target) | Improve this Doc View Source IsGrabbing() Declaration public: bool IsGrabbing() const Returns Type Description bool | Improve this Doc View Source RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has entered focus. Declaration protected: virtual void RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseEnterFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the target object that it has exited focus. Declaration protected: virtual void RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseExitFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) Notify the focused target object that the pointer has been updated. Declaration protected: virtual void RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) const override Parameters Type Name Description UObject * Target UUxtNearPointerComponent * Pointer Overrides FUxtPointerFocus::RaiseUpdateFocusEvent(UObject *Target, UUxtNearPointerComponent *Pointer) | Improve this Doc View Source UpdateGrab(UUxtNearPointerComponent *Pointer) Notify the grabbed target object that the pointer has been updated. Declaration public: void UpdateGrab(UUxtNearPointerComponent *Pointer) Parameters Type Name Description UUxtNearPointerComponent * Pointer"
  },
  "api/_u_uxt_pointer_component.html": {
    "href": "api/_u_uxt_pointer_component.html",
    "title": "Class UUxtPointerComponent | UXT Documentation",
    "keywords": "Class UUxtPointerComponent Base component for UXT pointers. Inheritance System::Object UActorComponent UUxtPointerComponent Namespace : Assembly : .dll Syntax public: class UUxtPointerComponent Constructors | Improve this Doc View Source UUxtPointerComponent() Declaration public: UUxtPointerComponent()=default Fields | Improve this Doc View Source bFocusLocked The lock state of the pointer. Declaration protected: bool bFocusLocked= false Field Value Type Description bool | Improve this Doc View Source GetCursorTransform() Get the cursor transform. Declaration public: FTransform GetCursorTransform() const PURE_VIRTUAL(UUxtPointerComponent Field Value Type Description FTransform | Improve this Doc View Source GetFocusTarget() Get the target currently being focused by the pointer, if any. Declaration public: UObject * GetFocusTarget() const PURE_VIRTUAL(UUxtPointerComponent Field Value Type Description UObject * | Improve this Doc View Source Hand The hand to be used for targeting. TODO: replace with generic input device. Declaration public: EControllerHand Hand= EControllerHand::AnyHand Field Value Type Description EControllerHand Methods | Improve this Doc View Source GetFocusLocked() Get the lock state of the pointer. Declaration public: bool GetFocusLocked() const Returns Type Description bool | Improve this Doc View Source SetFocusLocked(bool bLocked) Set the lock state of the pointer. Locked pointers don't update their hit, remaining focused on the primitive they were hitting until unlocked. Declaration public: virtual void SetFocusLocked(bool bLocked) Parameters Type Name Description bool bLocked"
  },
  "api/_u_x_tools_runtime_settings.html": {
    "href": "api/_u_x_tools_runtime_settings.html",
    "title": "Class UXToolsRuntimeSettings | UXT Documentation",
    "keywords": "Class UXToolsRuntimeSettings Inheritance System::Object ModuleRules UXToolsRuntimeSettings Namespace : Assembly : .dll Syntax public: class UXToolsRuntimeSettings Constructors | Improve this Doc View Source UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Declaration public: UXToolsRuntimeSettings(ReadOnlyTargetRules Target) Parameters Type Name Description ReadOnlyTargetRules Target"
  },
  "api/_u_uxt_touch_based_hand_tracker_subsystem.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_subsystem.html",
    "title": "Class UUxtTouchBasedHandTrackerSubsystem | UXT Documentation",
    "keywords": "Class UUxtTouchBasedHandTrackerSubsystem Local player subsystem that adds a UUxtTouchBasedHandTrackerComponent to player controllers as they are created. Inheritance System::Object ULocalPlayerSubsystem UUxtTouchBasedHandTrackerSubsystem Namespace : Assembly : .dll Syntax public: class UUxtTouchBasedHandTrackerSubsystem Methods | Improve this Doc View Source Deinitialize() Declaration public: virtual void Deinitialize() override | Improve this Doc View Source Initialize(FSubsystemCollectionBase &Collection) Declaration public: virtual void Initialize(FSubsystemCollectionBase &Collection) override Parameters Type Name Description FSubsystemCollectionBase & Collection | Improve this Doc View Source ShouldCreateSubsystem(UObject *Outer) Declaration public: virtual bool ShouldCreateSubsystem(UObject *Outer) const override Parameters Type Name Description UObject * Outer Returns Type Description bool"
  },
  "api/_u_uxt_touch_based_hand_tracker_component.html": {
    "href": "api/_u_uxt_touch_based_hand_tracker_component.html",
    "title": "Class UUxtTouchBasedHandTrackerComponent | UXT Documentation",
    "keywords": "Class UUxtTouchBasedHandTrackerComponent Component added automatically by UXT to the player controller to enable driving far interactions via touch input. The hand tracker interface is used just to provide the pointer pose and grab/select states, GetJointState() returns that pointer pose for all joints. Inheritance System::Object UActorComponent UUxtTouchBasedHandTrackerComponent Inherited Members IUxtHandTracker::GetHandTracker() IUxtHandTracker::GetModularFeatureName() IUxtHandTracker::~IUxtHandTracker() Namespace : Assembly : .dll Syntax public: class UUxtTouchBasedHandTrackerComponent : public xtHandTracker Methods | Improve this Doc View Source BeginPlay() Declaration public: virtual void BeginPlay() override | Improve this Doc View Source EndPlay(const EEndPlayReason::Type EndPlayReason) Declaration public: virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override Parameters Type Name Description const EEndPlayReason::Type EndPlayReason | Improve this Doc View Source GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) Obtain current grabbing state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) const Parameters Type Name Description EControllerHand Hand bool & OutIsGrabbing Returns Type Description bool Overrides IUxtHandTracker::GetIsGrabbing(EControllerHand Hand, bool &OutIsGrabbing) | Improve this Doc View Source GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) Obtain current selection state. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) const Parameters Type Name Description EControllerHand Hand bool & OutIsSelectPressed Returns Type Description bool Overrides IUxtHandTracker::GetIsSelectPressed(EControllerHand Hand, bool &OutIsSelectPressed) | Improve this Doc View Source GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) Obtain the state of the given joint. Returns false if the hand is not tracked this frame, in which case the values of the output parameters are unchanged. Declaration public: virtual bool GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) const Parameters Type Name Description EControllerHand Hand EUxtHandJoint Joint FQuat & OutOrientation FVector & OutPosition float & OutRadius Returns Type Description bool Overrides IUxtHandTracker::GetJointState(EControllerHand Hand, EUxtHandJoint Joint, FQuat &OutOrientation, FVector &OutPosition, float &OutRadius) | Improve this Doc View Source GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) Obtain the pointer pose. Returns false if the hand is not tracked this frame, in which case the value of the output parameter is unchanged. Declaration public: virtual bool GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition) const Parameters Type Name Description EControllerHand Hand FQuat & OutOrientation FVector & OutPosition Returns Type Description bool Overrides IUxtHandTracker::GetPointerPose(EControllerHand Hand, FQuat &OutOrientation, FVector &OutPosition)"
  },
  "api/_u_uxt_pressable_button_component.html": {
    "href": "api/_u_uxt_pressable_button_component.html",
    "title": "Class UUxtPressableButtonComponent | UXT Documentation",
    "keywords": "Class UUxtPressableButtonComponent Component that turns the actor it is attached to into a pressable rectangular button. Inheritance System::Object USceneComponent UUxtPressableButtonComponent Inherited Members IUxtPokeTarget::GetPokeBehaviour() IUxtFarTarget::IsFarFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::IsPokeFocusable(const UPrimitiveComponent *Primitive) IUxtPokeTarget::OnBeginPoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnEndPoke(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnEnterFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnEnterPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnExitFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnExitPokeFocus(UUxtNearPointerComponent *Pointer) IUxtFarTarget::OnFarDragged(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarPressed(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnFarReleased(UUxtFarPointerComponent *Pointer) IUxtFarTarget::OnUpdatedFarFocus(UUxtFarPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePoke(UUxtNearPointerComponent *Pointer) IUxtPokeTarget::OnUpdatePokeFocus(UUxtNearPointerComponent *Pointer) Namespace : Assembly : .dll Syntax public: class UUxtPressableButtonComponent : public xtPokeTarget, public xtFarTarget Constructors | Improve this Doc View Source UUxtPressableButtonComponent() Declaration public: UUxtPressableButtonComponent() Fields | Improve this Doc View Source OnBeginFocus Event raised when a pointer starts focusing the button. WasFocused indicates if the button was already focused by another pointer. Declaration public: FUxtButtonBeginFocusDelegate OnBeginFocus Field Value Type Description FUxtButtonBeginFocusDelegate | Improve this Doc View Source OnBeginPoke Event raised when a pointer starts poking the Pressable Button. Declaration public: FUxtButtonBeginPokeDelegate OnBeginPoke Field Value Type Description FUxtButtonBeginPokeDelegate | Improve this Doc View Source OnButtonDisabled Event raised when the button is disabled. Declaration public: FUxtButtonDisabledDelegate OnButtonDisabled Field Value Type Description FUxtButtonDisabledDelegate | Improve this Doc View Source OnButtonEnabled Event raised when the button is enabled. Declaration public: FUxtButtonEnabledDelegate OnButtonEnabled Field Value Type Description FUxtButtonEnabledDelegate | Improve this Doc View Source OnButtonPressed Event raised when the button reaches the pressed distance. Declaration public: FUxtButtonPressedDelegate OnButtonPressed Field Value Type Description FUxtButtonPressedDelegate | Improve this Doc View Source OnButtonReleased Event raised when the a pressed button reaches the released distance. Declaration public: FUxtButtonReleasedDelegate OnButtonReleased Field Value Type Description FUxtButtonReleasedDelegate | Improve this Doc View Source OnEndFocus Event raised when a pointer ends focusing the Pressable Button. IsFocused indicates if the Pressable Button is still focused by another pointer. Declaration public: FUxtButtonEndFocusDelegate OnEndFocus Field Value Type Description FUxtButtonEndFocusDelegate | Improve this Doc View Source OnEndPoke Event raised when a pointer ends poking the Pressable Button. Declaration public: FUxtButtonEndPokeDelegate OnEndPoke Field Value Type Description FUxtButtonEndPokeDelegate | Improve this Doc View Source OnUpdateFocus Event raised when a focusing pointer updates. Declaration public: FUxtButtonUpdateFocusDelegate OnUpdateFocus Field Value Type Description FUxtButtonUpdateFocusDelegate | Improve this Doc View Source OnUpdatePoke Event raised while a pointer is poking the Pressable Button. Declaration public: FUxtButtonUpdatePokeDelegate OnUpdatePoke Field Value Type Description FUxtButtonUpdatePokeDelegate | Improve this Doc View Source PressedFraction Fraction of the maximum travel distance at which the button will raise the pressed event. Declaration public: float PressedFraction= 0.5f Field Value Type Description float | Improve this Doc View Source RecoverySpeed Button movement speed while recovering Declaration public: float RecoverySpeed= 50 Field Value Type Description float | Improve this Doc View Source ReleasedFraction Fraction of the maximum travel distance at which a pressed button will raise the released event. Declaration public: float ReleasedFraction= 0.2f Field Value Type Description float Methods | Improve this Doc View Source BeginPlay() Declaration protected: virtual void BeginPlay() override | Improve this Doc View Source GetFrontFaceCollisionFraction() Get the distance from the visuals front face to the collider front face. Declaration public: float GetFrontFaceCollisionFraction() const Returns Type Description float | Improve this Doc View Source GetMaxPushDistance() Gets the maximum distance the button can be pushed Declaration public: float GetMaxPushDistance() const Returns Type Description float | Improve this Doc View Source GetPokeBehaviour_Implementation() Declaration protected: virtual EUxtPokeBehaviour GetPokeBehaviour_Implementation() const override Returns Type Description EUxtPokeBehaviour | Improve this Doc View Source GetPushBehavior() Gets the button behavior when pushed Declaration public: EUxtPushBehavior GetPushBehavior() const Returns Type Description EUxtPushBehavior | Improve this Doc View Source GetScaleAdjustedMaxPushDistance() Gets the maximum distance the button can be pushed scaled by the transform's 'x' scale. Declaration public: float GetScaleAdjustedMaxPushDistance() const Returns Type Description float | Improve this Doc View Source GetState() Get the current state of the button Declaration public: EUxtButtonState GetState() const Returns Type Description EUxtButtonState | Improve this Doc View Source GetVisuals() Get scene component used for the moving visuals Declaration public: USceneComponent * GetVisuals() const Returns Type Description USceneComponent * | Improve this Doc View Source IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsFarFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) Declaration protected: virtual bool IsPokeFocusable_Implementation(const UPrimitiveComponent *Primitive) override Parameters Type Name Description const UPrimitiveComponent * Primitive Returns Type Description bool | Improve this Doc View Source OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnBeginPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEndPoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnEnterFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnEnterPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnExitFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnExitPokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarPressed_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnFarReleased_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) Declaration protected: virtual void OnUpdatedFarFocus_Implementation(UUxtFarPointerComponent *Pointer) override Parameters Type Name Description UUxtFarPointerComponent * Pointer | Improve this Doc View Source OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePoke_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) Declaration protected: virtual void OnUpdatePokeFocus_Implementation(UUxtNearPointerComponent *Pointer) override Parameters Type Name Description UUxtNearPointerComponent * Pointer | Improve this Doc View Source SetCollisionProfile(FName Profile) Set collision profile used by the button collider Declaration public: void SetCollisionProfile(FName Profile) Parameters Type Name Description FName Profile | Improve this Doc View Source SetEnabled(bool Enabled) Set if the button is enabled Declaration public: void SetEnabled(bool Enabled) Parameters Type Name Description bool Enabled | Improve this Doc View Source SetFrontFaceCollisionFraction(float Distance) Set the distance from the visuals front face to the collider front face. Declaration public: void SetFrontFaceCollisionFraction(float Distance) Parameters Type Name Description float Distance | Improve this Doc View Source SetMaxPushDistance(float Distance) Sets the maximum distance the button can be pushed, does nothing when the push behavior is set to compress because the maximum distance is auto calculated Declaration public: void SetMaxPushDistance(float Distance) Parameters Type Name Description float Distance | Improve this Doc View Source SetPushBehavior(EUxtPushBehavior Behavior) Sets the button behavior when pushed Declaration public: void SetPushBehavior(EUxtPushBehavior Behavior) Parameters Type Name Description EUxtPushBehavior Behavior | Improve this Doc View Source SetUseAbsolutePushDistance(bool bAbsolute) Switch between world and local space for button distances Declaration public: void SetUseAbsolutePushDistance(bool bAbsolute) Parameters Type Name Description bool bAbsolute | Improve this Doc View Source SetVisuals(USceneComponent *Visuals) Set scene component to be used for the moving visuals Declaration public: void SetVisuals(USceneComponent *Visuals) Parameters Type Name Description USceneComponent * Visuals | Improve this Doc View Source TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) Declaration protected: virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override Parameters Type Name Description float DeltaTime ELevelTick TickType FActorComponentTickFunction * ThisTickFunction | Improve this Doc View Source VisualBoundsFilter(const USceneComponent *Component) Filter function used by the button when calculating the hierarchy bounds of the visuals Declaration public: static bool VisualBoundsFilter(const USceneComponent *Component) Parameters Type Name Description const USceneComponent * Component Returns Type Description bool"
  },
  "api/_u_uxt_internal_function_library.html": {
    "href": "api/_u_uxt_internal_function_library.html",
    "title": "Class UUxtInternalFunctionLibrary | UXT Documentation",
    "keywords": "Class UUxtInternalFunctionLibrary Library of utility intenral functions for UX Tools. Inheritance System::Object UBlueprintFunctionLibrary UUxtInternalFunctionLibrary Namespace : Assembly : .dll Syntax public: class UUxtInternalFunctionLibrary Methods | Improve this Doc View Source FStringToHexCodePoint(const FString &Input, FString &Output) Converts a UTF-16 FString into the corresponding unicode code point as hex representation. Returns true when the conversion is successful. Declaration public: static bool FStringToHexCodePoint(const FString &Input, FString &Output) Parameters Type Name Description const FString & Input FString & Output Returns Type Description bool | Improve this Doc View Source GetFontCharacterData(const UFont *Font, TArray<FUxtFontCharacter> &FontCharacters) Builds an array of FUxtFontCharacters for each character present in a UFont. Declaration public: static bool GetFontCharacterData(const UFont *Font, TArray<FUxtFontCharacter> &FontCharacters) Parameters Type Name Description const UFont * Font TArray< FUxtFontCharacter > & FontCharacters Returns Type Description bool | Improve this Doc View Source HexCodePointToFString(const FString &Input, FString &Output) Converts a Unicode code point as hex into the corresponding UTF-16 FString representation. Returns true when the conversion is successful. Declaration public: static bool HexCodePointToFString(const FString &Input, FString &Output) Parameters Type Name Description const FString & Input FString & Output Returns Type Description bool | Improve this Doc View Source IsFontOffline(const UFont *Font) Returns true if a UFont is using offline caching. Declaration public: static bool IsFontOffline(const UFont *Font) Parameters Type Name Description const UFont * Font Returns Type Description bool | Improve this Doc View Source IsPlayInMobilePreview(const UObject *WorldContextObject) Returns whether the world the passed object belongs to is executing within a mobile preview window. Declaration public: static bool IsPlayInMobilePreview(const UObject *WorldContextObject) Parameters Type Name Description const UObject * WorldContextObject Returns Type Description bool"
  },
  "api/_u_uxt_grab_target.html": {
    "href": "api/_u_uxt_grab_target.html",
    "title": "Class UUxtGrabTarget | UXT Documentation",
    "keywords": "Class UUxtGrabTarget Inheritance System::Object UInterface UUxtGrabTarget Namespace : Assembly : .dll Syntax public: class UUxtGrabTarget"
  }
}